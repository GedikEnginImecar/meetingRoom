okay i want you to add another div at the bottom of the div.container, with a set height

i want that div to be split in 2 using grid layout fractional units:
1 fr (view and delete meetings) 1 fr (create meeting) 

in the delete meeting, i want the user to have an uneditable box,
it just shows all the meetings the user has selected as a growing list 
and a delete button at the bottom of that column/div

in the create meeting i want there to be input boxes needed to create a meeting,
if there is an error in the backend, raise it as an alert please in the webpage
and a create button at the bottom of that column/div

meetingController:
// meetingController.js

const {
	Meeting,
	Room,
	User,
	connect,
	sequelize,
} = require("../configs/dbConfig");
const { Op } = require("sequelize");

exports.meetingController = {
	async createMeeting(req, res) {
		await connect();
		try {
			const { userID, roomID, meetingDate, meetingStart, meetingEnd } =
				req.body;

			// Check if the user has permission to create a meeting in the specified room

			const room = await Room.findByPk(roomID);
			const user = await User.findByPk(userID);

			if (!room || user.permission > room.minPermission) {
				return res.status(403).json({
					message: "Insufficient clearance to create a meeting in this room",
				});
			}

			// this is where you would try to get userID from the encrypted cookie and attempt to decrypt it to create a meeting
			// currently pass userID into it manually

			// Create the meeting
			const meeting = await Meeting.create({
				userID,
				roomID,
				meetingDate,
				meetingStart,
				meetingEnd,
			});

			res.status(201).json(meeting);
		} catch (error) {
			console.error("Error creating meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMeetings(req, res) {
		await connect();
		try {
			const meetings = await Meeting.findAll();
			res.json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getMeetingsByRoomDate(req, res) {
		await connect();
		try {
			const { roomID, meetingDate } = req.params;

			// Find the room by ID
			const room = await Room.findByPk(roomID);
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}

			const meetings = await Meeting.findAll({
				where: { roomID, meetingDate },
			});
			res.json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMeetingsBetween(req, res) {
		await connect();
		try {
			const { queryDateStart, queryDateEnd, roomID } = req.params;

			// Find all meetings between the specified dates
			const meetings = await Meeting.findAll({
				where: {
					meetingDate: {
						[Op.between]: [queryDateStart, queryDateEnd],
					},
					roomID: roomID,
				},
			});

			res.status(200).json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings between dates:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteMeetingByID(req, res) {
		await connect();
		try {
			const { meetingID } = req.params;

			// Find the meeting by ID
			const meeting = await Meeting.findByPk(meetingID);
			if (!meeting) {
				return res.status(404).json({ message: "Meeting not found" });
			}

			// Check if the user has permission to delete the meeting (assuming permission checks)
			// Additional permission logic can be added here

			// Delete the meeting
			await meeting.destroy();

			res.json({ message: "Meeting deleted successfully" });
		} catch (error) {
			console.error("Error deleting meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteMeetingByInfo(req, res) {
		await connect();
		try {
			const { roomID, meetingDate, meetingStart } = req.params;

			// Find the meeting by ID
			const meeting = await Meeting.findOne({
				where: { roomID, meetingDate, meetingStart },
			});
			if (!meeting) {
				return res.status(404).json({ message: "Meeting not found" });
			}

			// Check if the user has permission to delete the meeting (assuming permission checks)
			// Additional permission logic can be added here

			// Delete the meeting
			await meeting.destroy();

			res.json({ message: "Meeting deleted successfully" });
		} catch (error) {
			console.error("Error deleting meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};


meetingValidator:
const { body, validationResult } = require("express-validator");

exports.createMeetingValidator = [
	body("userID").notEmpty().isInt(),
	body("roomID").notEmpty().isInt(),
	body("meetingDate").notEmpty().isISO8601(),
	body("meetingStart").notEmpty().isString(),
	body("meetingEnd").notEmpty().isString(),
	(req, res, next) => {
		const errors = validationResult(req);
		if (!errors.isEmpty()) {
			return res.status(400).json({ errors: errors.array() });
		}
		next();
	},
];



meetingRouter:
const express = require("express");
const router = express.Router();
const { meetingController } = require("../controllers/meetingController");
const { createMeetingValidator } = require("../validators/meetingValidator");

// Route to create a new meeting
router.post("/create", createMeetingValidator, meetingController.createMeeting);

// Route to get all meetings
router.get("/meetings", meetingController.getAllMeetings);

// Route to get all meetings between two dates
router.get(
	"/search/between/:queryDateStart/:queryDateEnd/:roomID",
	meetingController.getAllMeetingsBetween
);

// Route to get meetings by room ID
router.get(
	"/search/:roomID/:meetingDate",
	meetingController.getMeetingsByRoomDate
);

// Route to delete a meeting by ID
router.delete(
	"/delete/meetingID/:meetingID",
	meetingController.deleteMeetingByID
);
router.delete(
	"/delete/byInfo/:roomID/:meetingDate/:meetingStart",
	meetingController.deleteMeetingByInfo
);

module.exports = router;


our public js file:
window.onload = async function () {
	await loadRooms(); // Load rooms when the page loads
};

async function loadRooms() {
	try {
		const response = await fetch("/room/rooms"); // Fetch all rooms
		if (!response.ok) {
			throw new Error("Failed to fetch rooms");
		}
		const rooms = await response.json();
		const roomSelect = document.getElementById("roomSelect");
		rooms.forEach((room) => {
			const option = document.createElement("option");
			option.value = room.roomID;
			option.textContent = `${room.roomName} - ${room.department}`;
			roomSelect.appendChild(option);
		});

		// Automatically select the nearest past Monday as the starting date
		const currentDate = new Date();
		const dayOfWeek = currentDate.getDay();
		const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
		const startOfWeek = new Date(currentDate);
		startOfWeek.setDate(currentDate.getDate() - daysToMonday);
		document.getElementById("startDate").value = startOfWeek
			.toISOString()
			.split("T")[0];

		// Load the calendar
		await loadCalendar();
	} catch (error) {
		console.error("Error loading rooms:", error.message);
	}
}

async function loadCalendar() {
	try {
		const roomID = document.getElementById("roomSelect").value;
		const startDate = document.getElementById("startDate").value;
		const endDate = addDays(startDate, 6);
		const response = await fetch(
			`/meeting/search/between/${startDate}/${endDate}/${roomID}`
		);
		if (!response.ok) {
			throw new Error("Failed to fetch meetings");
		}
		const meetings = await response.json();
		renderCalendar(meetings, startDate);
	} catch (error) {
		console.error("Error loading calendar:", error.message);
	}
}

function renderCalendar(meetings, startDate) {
	const calendar = document.getElementById("calendar");
	calendar.innerHTML = ""; // Clear previous calendar

	const daysOfWeek = [
		"Monday",
		"Tuesday",
		"Wednesday",
		"Thursday",
		"Friday",
		"Saturday",
		"Sunday",
	];

	for (let i = 0; i < 7; i++) {
		const currentDate = new Date(startDate);
		currentDate.setDate(currentDate.getDate() + i);

		const dayDiv = document.createElement("div");
		dayDiv.classList.add("day");
		dayDiv.textContent = `${
			daysOfWeek[i]
		} (${currentDate.toLocaleDateString()})`;

		meetings.forEach((meeting) => {
			const meetingDate = new Date(meeting.meetingDate);
			if (meetingDate.toDateString() === currentDate.toDateString()) {
				const meetingDiv = document.createElement("div");
				meetingDiv.classList.add("meeting");
				meetingDiv.textContent = `${meeting.meetingStart} - ${meeting.meetingEnd}`;
				meetingDiv.setAttribute("data-meeting-id", meeting.meetingID); // Add meeting ID as data attribute
				meetingDiv.addEventListener("click", () => {
					handleMeetingSelection(meeting.meetingID); // Call handleMeetingSelection with meeting ID on click
				});

				dayDiv.appendChild(meetingDiv);
			}
		});

		calendar.appendChild(dayDiv);
	}
}

function addDays(dateString, days) {
	const date = new Date(dateString);
	date.setDate(date.getDate() + days);
	return date.toISOString().split("T")[0];
}

function prevWeek() {
	const startDate = document.getElementById("startDate").value;
	const newStartDate = addDays(startDate, -7); // Subtract 7 days to go to previous week
	document.getElementById("startDate").value = newStartDate;
	loadCalendar();
}

function nextWeek() {
	const startDate = document.getElementById("startDate").value;
	const newStartDate = addDays(startDate, 7); // Add 7 days to go to next week
	document.getElementById("startDate").value = newStartDate;
	loadCalendar();
}

function validateDate() {
	const selectedDate = new Date(document.getElementById("startDate").value);
	const dayOfWeek = selectedDate.getDay();

	if (dayOfWeek !== 1) {
		alert("Please select a Monday.");
		const currentDate = new Date();
		const dayDiff = (currentDate.getDay() - 1 + 7) % 7;
		const lastMonday = new Date(currentDate);
		lastMonday.setDate(currentDate.getDate() - dayDiff);
		document.getElementById("startDate").value = lastMonday
			.toISOString()
			.split("T")[0];
	} else {
		loadCalendar(); // Load calendar when a Monday is selected
	}
}

// Function to handle meeting selection
function handleMeetingSelection(meetingID) {
	const selectedMeeting = document.querySelector(
		`[data-meeting-id="${meetingID}"]`
	);
	selectedMeeting.classList.toggle("selected");
	// Add your logic here to handle the selected meeting
}

// Add event listener for room select dropdown
document.getElementById("roomSelect").addEventListener("change", () => {
	loadCalendar(); // Load calendar when a new room is selected
});

// Add event listener to the start date input field for validation
document.getElementById("startDate").addEventListener("change", validateDate);
