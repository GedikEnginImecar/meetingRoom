roomController.js:
const { Room, connect } = require("../configs/dbConfig"); // importing relevant model (with sequelize) from dbconfig

exports.roomController = {
	// Controller functions for room operations
	async createRoom(req, res) {
		await connect();
		try {
			// Extract room data from request body
			const { roomName, minPermission, department } = req.body;

			// Create a new room record in the database
			const newRoom = await Room.create({
				roomName,
				minPermission,
				department,
			});

			res.status(201).json(newRoom);
		} catch (error) {
			console.error("Error creating room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Function to get all rooms
	async getAllRooms(req, res) {
		await connect();
		try {
			// Retrieve all rooms from the database
			const rooms = await Room.findAll();
			res.json(rooms);
		} catch (error) {
			console.error("Error retrieving rooms:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a room by ID
	async getRoomByID(req, res) {
		await connect();
		try {
			const { roomID } = req.params;
			const room = await Room.findByPk(roomID);
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}
			res.json(room);
		} catch (error) {
			console.error("Error retrieving room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a room by name
	async getRoomByName(req, res) {
		await connect();
		try {
			const { roomName } = req.params;
			const room = await Room.findOne({ where: { roomName } });
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}
			res.json(room);
		} catch (error) {
			console.error("Error retrieving room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteRoomByID(req, res) {
		await connect();
		try {
			// Extract room ID from request parameters
			const { roomID } = req.params;

			// Find the room by ID and delete it
			const deletedRoom = await Room.destroy({ where: { roomID: roomID } });

			if (!deletedRoom) {
				return res.status(404).json({ message: "Room not found" });
			}

			res.json({ message: "Room deleted successfully" });
		} catch (error) {
			console.error("Error deleting room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteRoomByName(req, res) {
		await connect();
		try {
			// Extract room name from request parameters
			const { roomName } = req.params;

			// Find the room by name and delete it
			const deletedRoom = await Room.destroy({ where: { roomName } });

			if (!deletedRoom) {
				return res.status(404).json({ message: "Room not found" });
			}

			res.json({ message: "Room deleted successfully" });
		} catch (error) {
			console.error("Error deleting room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};


meetingController.js:
// meetingController.js

const {
	Meeting,
	Room,
	User,
	connect,
	sequelize,
} = require("../configs/dbConfig");
const { Op } = require("sequelize");

exports.meetingController = {
	async createMeeting(req, res) {
		await connect();
		try {
			const { userID, roomID, meetingDate, meetingStart, meetingEnd } =
				req.body;

			// Check if the user has permission to create a meeting in the specified room

			const room = await Room.findByPk(roomID);
			const user = await User.findByPk(userID);

			if (!room || user.permission > room.minPermission) {
				return res.status(403).json({
					message: "Insufficient clearance to create a meeting in this room",
				});
			}

			// this is where you would try to get userID from the encrypted cookie and attempt to decrypt it to create a meeting
			// currently pass userID into it manually

			// Create the meeting
			const meeting = await Meeting.create({
				userID,
				roomID,
				meetingDate,
				meetingStart,
				meetingEnd,
			});

			res.status(201).json(meeting);
		} catch (error) {
			console.error("Error creating meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMeetings(req, res) {
		await connect();
		try {
			const meetings = await Meeting.findAll();
			res.json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getMeetingsByRoomDate(req, res) {
		await connect();
		try {
			const { roomID, meetingDate } = req.params;

			// Find the room by ID
			const room = await Room.findByPk(roomID);
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}

			const meetings = await Meeting.findAll({
				where: { roomID, meetingDate },
			});
			res.json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMeetingsBetween(req, res) {
		await connect();
		try {
			const { queryDateStart, queryDateEnd, roomID } = req.params;

			// Find all meetings between the specified dates
			const meetings = await Meeting.findAll({
				where: {
					meetingDate: {
						[Op.between]: [queryDateStart, queryDateEnd],
					},
					roomID: roomID,
				},
			});

			res.status(200).json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings between dates:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteMeetingByID(req, res) {
		await connect();
		try {
			const { meetingID } = req.params;

			// Find the meeting by ID
			const meeting = await Meeting.findByPk(meetingID);
			if (!meeting) {
				return res.status(404).json({ message: "Meeting not found" });
			}

			// Check if the user has permission to delete the meeting (assuming permission checks)
			// Additional permission logic can be added here

			// Delete the meeting
			await meeting.destroy();

			res.json({ message: "Meeting deleted successfully" });
		} catch (error) {
			console.error("Error deleting meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteMeetingByInfo(req, res) {
		await connect();
		try {
			const { roomID, meetingDate, meetingStart } = req.params;

			// Find the meeting by ID
			const meeting = await Meeting.findOne({
				where: { roomID, meetingDate, meetingStart },
			});
			if (!meeting) {
				return res.status(404).json({ message: "Meeting not found" });
			}

			// Check if the user has permission to delete the meeting (assuming permission checks)
			// Additional permission logic can be added here

			// Delete the meeting
			await meeting.destroy();

			res.json({ message: "Meeting deleted successfully" });
		} catch (error) {
			console.error("Error deleting meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};




roomRouter.js:
const express = require("express");
const router = express.Router();
const { roomController } = require("../controllers/roomController");
const { createRoomValidator } = require("../validators/roomValidator");

// Route to create a room
router.post("/create", createRoomValidator, roomController.createRoom);

// Route to get all rooms
router.get("/rooms", roomController.getAllRooms);

// Route to get a room by ID
router.get("/search/roomID/:roomID", roomController.getRoomByID);

// Route to get a room by name
router.get("/search/roomName/:roomName", roomController.getRoomByName);

// Route to delete a room by ID
router.delete("/delete/roomID/:roomID", roomController.deleteRoomByID);

// Route to delete a room by name
router.delete("/delete/roomName/:roomName", roomController.deleteRoomByName);

module.exports = router;


meetingRouter.js:
const express = require("express");
const router = express.Router();
const { meetingController } = require("../controllers/meetingController");
const { createMeetingValidator } = require("../validators/meetingValidator");

// Route to create a new meeting
router.post("/create", createMeetingValidator, meetingController.createMeeting);

// Route to get all meetings
router.get("/meetings", meetingController.getAllMeetings);

// Route to get all meetings between two dates
router.get(
	"/search/between/:queryDateStart/:queryDateEnd/:roomID",
	meetingController.getAllMeetingsBetween
);

// Route to get meetings by room ID
router.get(
	"/search/:roomID/:meetingDate",
	meetingController.getMeetingsByRoomDate
);

// Route to delete a meeting by ID
router.delete(
	"/delete/meetingID/:meetingID",
	meetingController.deleteMeetingByID
);
router.delete(
	"/delete/byInfo/:roomID/:meetingDate/:meetingStart",
	meetingController.deleteMeetingByInfo
);

module.exports = router;



------

i want you to use the room router to get a list of all the rooms within the database, and then display their names in the dropbox where the users select the room

and then when user presses load calender, it use the getAllMeetingsBetween router, and then pass in the roomID, selected from the dropdown with names as i mentioned before,
so you can getRoomByName and extract the roomID from that if you wish, and then use the returned meetings between the interval to populate the calender

the date between should use the same logic as the old code, force a week beginning to be monday, and then the query interval is that monday until the moment before the next monday arrives

is there any confusion?