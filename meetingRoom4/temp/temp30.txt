I have my leds.html, where the html code goes into,
I want the leds.js within public class to use ledRouter.js I have to communicate with ledController.js
I want it such that the user presses button on the leds.html, the leds.js acknowledges that and then routes the information and needed data into ledRouter.js.
the ledRouter forwards it into ledController.js
where the controller assembles a url similar to the example below, but if the hue passed from router is inside stringToHue on the string side, it changes it into the hue format (keep the || hue === red as i need it)
and then once url is assembled using url path variables like the example, it is sent to the esps ip address

flow should be -> user press button on leds.html -> leds.js forwards the data from button press to led router -> forwards data into ledController -> parses data from led router and assembles new url for esp32 -> sends the url to the esp32

------
example function:

document.addEventListener("DOMContentLoaded", function () {
				document
					.getElementById("redButton")
					.addEventListener("click", function () {
						setLeds(0, 255, 255); // Set LEDs to red
					});

				document
					.getElementById("greenButton")
					.addEventListener("click", function () {
						setLeds(85, 255, 255); // Set LEDs to green
					});

				function setLeds(hue, saturation, value) {
					var xhr = new XMLHttpRequest();
					xhr.open(
						"GET",
						"http://192.168.4.1:8080/esp32/setLeds?hue=" +
							hue +
							"&saturation=" +
							saturation +
							"&value=" +
							value,
						true
					);
					xhr.onreadystatechange = function () {
						if (xhr.readyState === 4) {
							if (xhr.status === 200) {
								console.log(xhr.responseText);
							} else {
								console.error("Error:", xhr.statusText);
							}
						}
					};
					xhr.send();
				}
			});


ledController.js:
// can be used to control more advanced led functions that cant easily be defined as preset functions within the cpp code of the esp32
const axios = require("axios");

const stringToHue = {
	blue: 170,
	blueGreen: 127,
	green: 85,
	greenYellow: 42,
	yellow: 21,
	yellowOrange: 15,
	orange: 10,
	orangeRed: 5,
	red: 0,
	redViolet: 213,
	violet: 191,
	violetBlue: 170,
};

exports.ledControls = {
	async setLeds(req, res) {
		// Extract color information from the request body
		let { hue, saturation, value } = req.body;

		// If saturation or value are empty, null, or undefined, set them to 255
		saturation = saturation || 255;
		value = value || 255;

		// Check if hue is a color name, if so, replace it with its corresponding hue value
		if (stringToHue[hue] || hue === "red") {
			hue = stringToHue[hue];
		}

		// Construct data object with color information
		const data = {
			hue: parseInt(hue),
			saturation: parseInt(saturation),
			value: parseInt(value),
		};
	},

	async toggleBlink(req, res) {
		console.log("toggleBlink");
	},

	async func2(req, res) {
		console.log("func2");
	},
};


ledRouter.js:
// the commands and instructions from nodeJS app go to the esp32 from here
// acts as a router to the led methods within the esp32

const express = require("express");
const router = express.Router();
const { ledControls } = require("../controllers/ledController");

router.post("/setLed", ledControls.setLeds);

router.post("/toggleBlink", ledControls.toggleBlink);

router.post("/func2", ledControls.func2);

module.exports = router;


leds.html:
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Led Controller</title>
		<link rel="stylesheet" href="../css/leds.css" />
	</head>
	<body>
		<div class="container">
			<h1 class="page-title">Led Controller</h1>
			<button class="setLed" id="red">Set Red</button>
			<button class="setLed" id="yellow">Set Yellow</button>
			<button class="setLed" id="green">Set Green</button>
			<button id="toggleBlink">Toggle Blink</button>
		</div>
		<script src="../js/leds.js"></script>
	</body>
</html>

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>LED Controller</title>
	</head>
	<body>
		<button id="redButton">Red</button>
		<button id="yellowButton">Yellow</button>
		<button id="greenButton">Green</button>
		<button id="toggleBlink">Toggle Blink</button>

		<script src="../js/leds.js"></script>
	</body>
</html>


server.js:
const express = require("express");
const cors = require("cors");
require("dotenv").config();

const cookieParser = require("cookie-parser"); // Import cookie-parser
const userRouter = require("./routers/userRouter");
const roomRouter = require("./routers/roomRouter");
const meetingRouter = require("./routers/meetingRouter");
const ledRouter = require("./routers/ledRouter");
const authRouter = require("./routers/authRouter"); // Update to authRouter
const { connect } = require("./configs/dbConfig"); // Import the connect function

const app = express();
const port = process.env.PORT || 8080;

app.use(express.json());
app.use(cookieParser()); // Use cookie-parser middleware
app.use(express.static("public")); // Serve static files from the public directory
app.use(cors()); // allowing the use of cors

app.use("/user", userRouter);
app.use("/room", roomRouter);
app.use("/meeting", meetingRouter);
app.use("/auth", authRouter);
app.use("/led", ledRouter);

// Connect to the database when the server starts
connect()
	.then(() => {
		// Start the server after establishing the database connection
		app.listen(port, () => {
			console.log(`Server is running on port ${port}`);
		});
	})
	.catch((error) => {
		console.error("Error connecting to the database:", error);
		process.exit(1); // Exit with error
	});



project file structure
â”£ ðŸ“‚.vscode
â”ƒ â”— ðŸ“œsettings.json
â”£ ðŸ“‚configs
â”ƒ â”£ ðŸ“œdbConfig.js
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚controllers
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œledController.js
â”ƒ â”£ ðŸ“œmeetingController.js
â”ƒ â”£ ðŸ“œroomController.js
â”ƒ â”— ðŸ“œuserController.js
â”£ ðŸ“‚ledControl
â”ƒ   â”— the esp code is contained within this folder
â”£ ðŸ“‚middlewares
â”ƒ â”£ ðŸ“‚auth
â”ƒ â”ƒ â”£ ðŸ“œauth.js
â”ƒ â”ƒ â”— ðŸ“œinfo.md
â”ƒ â”£ ðŸ“‚dtos
â”ƒ â”ƒ â”£ ðŸ“œappInfoDTO.js
â”ƒ â”ƒ â”£ ðŸ“œmeetingDTO.js
â”ƒ â”ƒ â”£ ðŸ“œpermissionDTO.js
â”ƒ â”ƒ â”£ ðŸ“œroomDTO.js
â”ƒ â”ƒ â”— ðŸ“œuserDTO.js
â”ƒ â”£ ðŸ“‚responses
â”ƒ â”ƒ â”£ ðŸ“œauthenticationResponse.js
â”ƒ â”ƒ â”£ ðŸ“œerrorResponse.js
â”ƒ â”ƒ â”£ ðŸ“œpermissionResponse.js
â”ƒ â”ƒ â”£ ðŸ“œresourceResponse.js
â”ƒ â”ƒ â”£ ðŸ“œsuccessResponse.js
â”ƒ â”ƒ â”— ðŸ“œvalidationResponse.js
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚models
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingModel.js
â”ƒ â”£ ðŸ“œroomModel.js
â”ƒ â”— ðŸ“œuserModel.js
â”£ ðŸ“‚public
â”ƒ â”£ ðŸ“‚css
â”ƒ â”ƒ â”£ ðŸ“œdashboard.css
â”ƒ â”ƒ â”£ ðŸ“œleds.css
â”ƒ â”ƒ â”£ ðŸ“œlogin.css
â”ƒ â”ƒ â”£ ðŸ“œmeetings.css
â”ƒ â”ƒ â”£ ðŸ“œregister.css
â”ƒ â”ƒ â”— ðŸ“œrooms.css
â”ƒ â”£ ðŸ“‚html
â”ƒ â”ƒ â”£ ðŸ“œdashboard.html
â”ƒ â”ƒ â”£ ðŸ“œleds.html
â”ƒ â”ƒ â”£ ðŸ“œlogin.html
â”ƒ â”ƒ â”£ ðŸ“œmeetings.html
â”ƒ â”ƒ â”£ ðŸ“œregister.html
â”ƒ â”ƒ â”— ðŸ“œrooms.html
â”ƒ â”£ ðŸ“‚js
â”ƒ â”ƒ â”£ ðŸ“œdashboard.js
â”ƒ â”ƒ â”£ ðŸ“œleds.js
â”ƒ â”ƒ â”£ ðŸ“œlogin.js
â”ƒ â”ƒ â”£ ðŸ“œmeetings.js
â”ƒ â”ƒ â”£ ðŸ“œregister.js
â”ƒ â”ƒ â”— ðŸ“œrooms.js
â”ƒ â”£ ðŸ“œindex.html
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚routers
â”ƒ â”£ ðŸ“œauthRouter.js
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œledRouter.js
â”ƒ â”£ ðŸ“œmeetingRouter.js
â”ƒ â”£ ðŸ“œroomRouter.js
â”ƒ â”— ðŸ“œuserRouter.js
â”£ ðŸ“‚validators
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingValidator.js
â”ƒ â”£ ðŸ“œroomValidator.js
â”ƒ â”— ðŸ“œuserValidator.js
â”£ ðŸ“œ.env
â”£ ðŸ“œ.gitignore
â”£ ðŸ“œpackage.json
â”— ðŸ“œserver.js
