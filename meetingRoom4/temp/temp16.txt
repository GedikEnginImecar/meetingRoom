meetings.js:
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Meeting Room Calendar</title>
		<link rel="stylesheet" href="../css/meetings.css" />
	</head>
	<body>
		<div class="container">
			<div id="calendar-header">
				<h2>Meeting Room Calendar</h2>
				<div id="calendar-nav">
					<select id="roomSelect">
						<option value="" disabled selected>Select a room</option>
					</select>
					<input type="date" id="startDate" onchange="validateDate()" />
					<button id="prev-week" onclick="prevWeek()">Previous Week</button>
					<button id="next-week" onclick="nextWeek()">Next Week</button>
					<button id="deleteMeetingsButton" onclick="deleteSelectedMeetings()">
						Delete Selected Meetings
					</button>
				</div>
			</div>
			<div id="calendar"></div>

			<!-- Container for create meeting section -->
			<div class="create-meeting-container">
				<h3>Create Meeting</h3>
				<div class="create-meeting-section">
					<label for="meetingDate">Meeting Date:</label>
					<input
						type="date"
						id="meetingDate"
						class="custom-input"
						placeholder="Meeting Date"
						required
					/>

					<label for="userID">User ID:</label>
					<input
						type="text"
						id="userID"
						placeholder="User ID"
						required
						readonly
					/>

					<label for="meetingStart">Meeting Start Time:</label>
					<input
						type="time"
						id="meetingStart"
						placeholder="Meeting Start Time"
						required
					/>

					<label for="meetingEnd">Meeting End Time:</label>
					<input
						type="time"
						id="meetingEnd"
						placeholder="Meeting End Time"
						required
					/>
				</div>
				<button id="createMeetingButton" onclick="createMeeting()">
					Create Meeting
				</button>
			</div>
		</div>
		<script src="../js/meetings.js"></script>
	</body>
</html>

server.js:
const express = require("express");
const userRouter = require("./routers/userRouter");
const roomRouter = require("./routers/roomRouter");
const meetingRouter = require("./routers/meetingRouter");
const { connect } = require("./configs/dbConfig"); // Import the connect function
require("dotenv").config();

const app = express();
const port = process.env.PORT || 8080;

app.use(express.json());
app.use(express.static("public")); // Serve static files from the public directory

app.use("/user", userRouter);
app.use("/room", roomRouter);
app.use("/meeting", meetingRouter);

// Connect to the database when the server starts
connect()
	.then(() => {
		// Start the server after establishing the database connection
		app.listen(port, () => {
			console.log(`Server is running on port ${port}`);
		});
	})
	.catch((error) => {
		console.error("Error connecting to the database:", error);
		process.exit(1); // Exit with error
	});


auth.js:
require("dotenv").config();
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { serialize } = require("cookie");

const saltRounds = 10;
const JWT_SECRET = process.env.JWT_SECRET; // Use JWT secret key from .env file

exports.auth = {
	// This function takes a password and returns a promise that resolves with the hashed password.
	async hashPassword(password) {
		return await bcrypt.hash(password, saltRounds);
	},

	// This function takes a password and a hashed password and returns a promise that resolves with a boolean indicating whether the password matches the hashed password.
	async checkPassword(password, hashedPassword) {
		return bcrypt.compare(password, hashedPassword);
	},

	// This function takes a user object and returns a JWT token.
	async generateToken(user, res) {
		const { userID } = user;
		const token = jwt.sign({ userID }, process.env.JWT_SECRET, {
			expiresIn: "1h",
		});

		// Set the token as a cookie
		const tokenCookie = serialize("token", token, {
			httpOnly: true,
			maxAge: 3600000, // 1 hour
			secure: false, // Set to true in production (for HTTPS)
			sameSite: "strict",
		});

		// Add the cookie to the response headers
		res.setHeader("Set-Cookie", tokenCookie);

		return token;
	},

	//This function takes a user object and returns a refresh token.
	async refreshToken(user) {
		const { _id, id } = user;
		return jwt.sign({ _id, id }, JWT_SECRET, { expiresIn: "48h" });
	},

	// This function takes a token and returns the decoded payload.
	async verifyToken(token) {
		try {
			const decoded = jwt.verify(token, JWT_SECRET);
			return decoded;
		} catch (error) {
			console.error("Token verification failed:", error);
			return null;
		}
	},
};

.env:
DB_HOST = localhost
DB_USER = postgres
DB_PASSWORD = root
DB_NAME = meetingRoom4
DB_DIALECT = postgres

PORT = 8080

JWT_SECRET = I_Like_Eggs
SECRET_ID_ENCRYPTION = I_Like_Cabbage

userRouter.js:
// userRouter.js

const express = require("express");
const router = express.Router();
const { userController } = require("../controllers/userController");

const {
	registerValidator,
	loginValidator,
} = require("../validators/userValidator");

// Route for user registration
router.post("/register", registerValidator, userController.register);

// Route for user login
router.post("/login", loginValidator, userController.login);

// Route to get all users
router.get("/users", userController.getAllUsers);

// Route to get a user by ID
router.get("/search/userID/:userID", userController.getUserByID);

// Route to get a user by name
router.get("/search/userName/:username", userController.getUserByName);

// Route to delete a user by ID
router.delete("/delete/userID/:userID", userController.deleteUserByID);

// Route to delete a user by username
router.delete("/delete/userName/:username", userController.deleteUserByName);

module.exports = router;


meetingRouter.js:
const express = require("express");
const router = express.Router();
const { meetingController } = require("../controllers/meetingController");
const { createMeetingValidator } = require("../validators/meetingValidator");

// Route to create a new meeting
router.post("/create", createMeetingValidator, meetingController.createMeeting);

// Route to get all meetings
router.get("/meetings", meetingController.getAllMeetings);

// Route to get all meetings between two dates
router.get(
	"/search/between/:queryDateStart/:queryDateEnd/:roomID",
	meetingController.getAllMeetingsBetween
);

// Route to get meetings by room ID
router.get(
	"/search/:roomID/:meetingDate",
	meetingController.getMeetingsByRoomDate
);

// Route to delete a meeting by ID
router.delete(
	"/delete/meetingID/:meetingID",
	meetingController.deleteMeetingByID
);
router.delete(
	"/delete/byInfo/:roomID/:meetingDate/:meetingStart",
	meetingController.deleteMeetingByInfo
);

module.exports = router;


userController.js:
// userController.js

const { User, connect } = require("../configs/dbConfig"); // importing relevant model (with sequelize) from dbconfig
const { auth } = require("../middlewares/auth/auth"); // Import the auth object from auth.js

exports.userController = {
	// Controller function to register a new user
	async register(req, res) {
		await connect();
		try {
			const { username, password, permission, department } = req.body;

			// Check if a user with the same username already exists
			const existingUser = await User.findOne({
				where: { username },
			});
			if (existingUser) {
				return res.status(400).json({ message: "Username is already taken" });
			}

			// Hash the password
			const hashedPassword = await auth.hashPassword(password);

			// Create a new user in the database
			const newUser = await User.create({
				username,
				password: hashedPassword,
				permission,
				department,
			});

			res.status(201).json(newUser);
		} catch (error) {
			console.error("Error registering user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async login(req, res) {
		await connect();
		try {
			const { username, password } = req.body;

			// Find the user in the database
			const user = await User.findOne({
				where: { username },
			});

			if (!user) {
				return res
					.status(401)
					.json({ message: "Invalid username or password" });
			}

			// Check password
			const passwordMatch = await auth.checkPassword(password, user.password);
			if (!passwordMatch) {
				return res
					.status(401)
					.json({ message: "Invalid username or password" });
			}

			// Generate JWT token
			const token = auth.generateToken(user, res);
			res.json({ token });
		} catch (error) {
			console.error("Error logging in user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Function to get all users
	async getAllUsers(req, res) {
		await connect();
		try {
			// Retrieve all rooms from the database
			const users = await User.findAll();
			res.json(users);
		} catch (error) {
			console.error("Error retrieving users:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a room by ID
	async getUserByID(req, res) {
		await connect();
		try {
			const { userID } = req.params;
			const user = await User.findByPk(userID);
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}
			res.json(user);
		} catch (error) {
			console.error("Error retrieving user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a user by name
	async getUserByName(req, res) {
		await connect();
		try {
			const { username } = req.params;
			const user = await User.findOne({ where: { username } });
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}
			res.json(user);
		} catch (error) {
			console.error("Error retrieving user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to delete a user by ID
	async deleteUserByID(req, res) {
		await connect();
		try {
			const { userID } = req.params;

			// Find the user by ID
			const user = await User.findByPk(userID);
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}

			// Delete the user
			await user.destroy();

			res.json({ message: "User deleted successfully" });
		} catch (error) {
			console.error("Error deleting user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to delete a user by username
	async deleteUserByName(req, res) {
		await connect();
		try {
			const { username } = req.params;

			// Find the user by username
			const user = await User.findOne({ where: { username } });
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}

			// Delete the user
			await user.destroy();

			res.json({ message: "User deleted successfully" });
		} catch (error) {
			console.error("Error deleting user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};

meetingController.js:
// meetingController.js

const {
	Meeting,
	Room,
	User,
	connect,
	sequelize,
} = require("../configs/dbConfig");
const { Op } = require("sequelize");

exports.meetingController = {
	async createMeeting(req, res) {
		await connect();
		try {
			const { userID, roomID, meetingDate, meetingStart, meetingEnd } =
				req.body;

			// Check if the user has permission to create a meeting in the specified room

			const room = await Room.findByPk(roomID);
			const user = await User.findByPk(userID);

			if (!room || user.permission > room.minPermission) {
				return res.status(403).json({
					message: "Insufficient clearance to create a meeting in this room",
				});
			}

			// this is where you would try to get userID from the encrypted cookie and attempt to decrypt it to create a meeting
			// currently pass userID into it manually

			// Create the meeting
			const meeting = await Meeting.create({
				userID,
				roomID,
				meetingDate,
				meetingStart,
				meetingEnd,
			});

			res.status(201).json(meeting);
		} catch (error) {
			console.error("Error creating meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMeetings(req, res) {
		await connect();
		try {
			const meetings = await Meeting.findAll();
			res.json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getMeetingsByRoomDate(req, res) {
		await connect();
		try {
			const { roomID, meetingDate } = req.params;

			// Find the room by ID
			const room = await Room.findByPk(roomID);
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}

			const meetings = await Meeting.findAll({
				where: { roomID, meetingDate },
			});
			res.json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMeetingsBetween(req, res) {
		await connect();
		try {
			const { queryDateStart, queryDateEnd, roomID } = req.params;

			// Find all meetings between the specified dates
			const meetings = await Meeting.findAll({
				where: {
					meetingDate: {
						[Op.between]: [queryDateStart, queryDateEnd],
					},
					roomID: roomID,
				},
			});

			res.status(200).json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings between dates:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteMeetingByID(req, res) {
		await connect();
		try {
			const { meetingID } = req.params;

			// Find the meeting by ID
			const meeting = await Meeting.findByPk(meetingID);
			if (!meeting) {
				return res.status(404).json({ message: "Meeting not found" });
			}

			// Check if the user has permission to delete the meeting (assuming permission checks)
			// Additional permission logic can be added here

			// Delete the meeting
			await meeting.destroy();

			res.json({ message: "Meeting deleted successfully" });
		} catch (error) {
			console.error("Error deleting meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteMeetingByInfo(req, res) {
		await connect();
		try {
			const { roomID, meetingDate, meetingStart } = req.params;

			// Find the meeting by ID
			const meeting = await Meeting.findOne({
				where: { roomID, meetingDate, meetingStart },
			});
			if (!meeting) {
				return res.status(404).json({ message: "Meeting not found" });
			}

			// Check if the user has permission to delete the meeting (assuming permission checks)
			// Additional permission logic can be added here

			// Delete the meeting
			await meeting.destroy();

			res.json({ message: "Meeting deleted successfully" });
		} catch (error) {
			console.error("Error deleting meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};
