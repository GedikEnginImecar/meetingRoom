roomRouter.js:
// roomRouter.js

const express = require("express");
const router = express.Router();
const { roomController } = require("../controllers/roomController");
const { verifyAndAttachUser } = require("../middlewares/auth/auth"); // Import the verifyAndAttachUser middleware
const { createRoomValidator } = require("../validators/roomValidator");

// Route for creating a room
router.post(
	"/create",
	verifyAndAttachUser,
	createRoomValidator,
	roomController.createRoom
);

// Route to get all rooms
router.get("/rooms", verifyAndAttachUser, roomController.getAllRooms);

// Route to get a room by ID
router.get(
	"/search/roomID/:roomID",
	verifyAndAttachUser,
	roomController.getRoomByID
);

// Route to get a room by name
router.get(
	"/search/roomName/:roomName",
	verifyAndAttachUser,
	roomController.getRoomByName
);

// Route to delete a room by ID
router.delete(
	"/delete/roomID/:roomID",
	verifyAndAttachUser,
	roomController.deleteRoomByID
);

// Route to delete a room by name
router.delete(
	"/delete/roomName/:roomName",
	verifyAndAttachUser,
	roomController.deleteRoomByName
);

module.exports = router;


roomController.js:
const { Room, connect } = require("../configs/dbConfig"); // importing relevant model (with sequelize) from dbconfig

exports.roomController = {
	// Controller functions for room operations
	async createRoom(req, res) {
		await connect();
		try {
			// Extract room data from request body
			const { roomName, minPermission, department } = req.body;

			// Create a new room record in the database
			const newRoom = await Room.create({
				roomName,
				minPermission,
				department,
			});

			res.status(201).json(newRoom);
		} catch (error) {
			console.error("Error creating room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Function to get all rooms
	async getAllRooms(req, res) {
		await connect();
		try {
			// Retrieve all rooms from the database
			const rooms = await Room.findAll();
			res.json(rooms);
		} catch (error) {
			console.error("Error retrieving rooms:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a room by ID
	async getRoomByID(req, res) {
		await connect();
		try {
			const { roomID } = req.params;
			const room = await Room.findByPk(roomID);
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}
			res.json(room);
		} catch (error) {
			console.error("Error retrieving room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a room by name
	async getRoomByName(req, res) {
		await connect();
		try {
			const { roomName } = req.params;
			const room = await Room.findOne({ where: { roomName } });
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}
			res.json(room);
		} catch (error) {
			console.error("Error retrieving room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteRoomByID(req, res) {
		await connect();
		try {
			// Extract room ID from request parameters
			const { roomID } = req.params;

			// Find the room by ID and delete it
			const deletedRoom = await Room.destroy({ where: { roomID: roomID } });

			if (!deletedRoom) {
				return res.status(404).json({ message: "Room not found" });
			}

			res.json({ message: "Room deleted successfully" });
		} catch (error) {
			console.error("Error deleting room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteRoomByName(req, res) {
		await connect();
		try {
			// Extract room name from request parameters
			const { roomName } = req.params;

			// Find the room by name and delete it
			const deletedRoom = await Room.destroy({ where: { roomName } });

			if (!deletedRoom) {
				return res.status(404).json({ message: "Room not found" });
			}

			res.json({ message: "Room deleted successfully" });
		} catch (error) {
			console.error("Error deleting room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};


auth.js:
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { serialize, parse } = require("cookie");
require("dotenv").config();

// Load environment variables
const JWT_SECRET = process.env.JWT_SECRET;
const REFRESH_TOKEN_SECRET = process.env.REFRESH_TOKEN_SECRET;

// Number of salt rounds for password hashing
const saltRounds = 10;

exports.auth = {
	// Functions related to authentication (password hashing and verification)
	async hashPassword(password) {
		return await bcrypt.hash(password, saltRounds);
	},

	async checkPassword(password, hashedPassword) {
		return await bcrypt.compare(password, hashedPassword);
	},
};

exports.tokens = {
	// Functions related to tokens
	async generateAccessToken(userID) {
		return jwt.sign({ userID }, JWT_SECRET, { expiresIn: "15m" });
	},

	async generateRefreshToken(userID) {
		return jwt.sign({ userID }, REFRESH_TOKEN_SECRET, { expiresIn: "1.5h" });
	},
};

exports.cookies = {
	// Functions related to cookies
	async parseCookies(cookieHeader) {
		return parse(cookieHeader);
	},

	async verifyAndAttachUser(req, res, next) {
		const cookieHeader = req.headers.cookie;
		if (!cookieHeader) {
			return res.status(401).json({ message: "No cookies sent" });
		}

		const cookies = parse(cookieHeader);
		const token = cookies.token;

		if (!token) {
			return res.status(401).json({ message: "Token not found in cookies" });
		}

		try {
			const decoded = jwt.verify(token, JWT_SECRET);
			req.user = decoded; // Attach the decoded token to the request object
			next();
		} catch (error) {
			return res.status(400).json({ message: "Invalid token" });
		}
	},
};


authRouter.js:
const express = require("express");
const jwt = require("jsonwebtoken");
const { verifyAndAttachUser } = require("../middlewares/auth");
const router = express.Router();

// Middleware to parse cookies
router.use(cookieParser());

// Route to decode the token cookie
router.get("/decodeToken", verifyAndAttachUser, (req, res) => {
	const decoded = req.user;
	res.json({ decoded });
});

module.exports = router;


with the followinng error:
[nodemon] starting `node server.js`
C:\Users\Administrator\Documents\dev\Imecar\meetingRoom4\node_modules\express\lib\router\route.js:211
        throw new Error(msg);
        ^

Error: Route.post() requires a callback function but got a [object Undefined]
    at Route.<computed> [as post] (C:\Users\Administrator\Documents\dev\Imecar\meetingRoom4\node_modules\express\lib\router\route.js:211:15)
    at proto.<computed> [as post] (C:\Users\Administrator\Documents\dev\Imecar\meetingRoom4\node_modules\express\lib\router\index.js:521:19)
    at Object.<anonymous> (C:\Users\Administrator\Documents\dev\Imecar\meetingRoom4\routers\roomRouter.js:10:8)
    at Module._compile (node:internal/modules/cjs/loader:1376:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1435:10)
    at Module.load (node:internal/modules/cjs/loader:1207:32)
    at Module._load (node:internal/modules/cjs/loader:1023:12)
    at Module.require (node:internal/modules/cjs/loader:1235:19)
    at require (node:internal/modules/helpers:176:18)
    at Object.<anonymous> (C:\Users\Administrator\Documents\dev\Imecar\meetingRoom4\server.js:3:20)

Node.js v20.10.0
[nodemon] app crashed - waiting for file changes before starting...