ok so we want the checkNextMeeting to use setLedsUI function and the color mapping at the top of the code to send the appropriate colors at the appropriate times to set leds UI

mind you both of these are in ledController.js:

ledController.js:
// can be used to control more advanced led functions that cant easily be defined as preset functions within the cpp code of the esp32
const axios = require("axios");
const { roomController } = require("../controllers/roomController");
const { meetingController } = require("../controllers/meetingController");

const stringToHue = {
	blue: 170,
	blueGreen: 127,
	green: 85,
	greenYellow: 42,
	yellow: 21,
	yellowOrange: 15,
	orange: 10,
	orangeRed: 5,
	red: 0,
	redViolet: 213,
	violet: 191,
	violetBlue: 170,
};

exports.ledControls = {
	async setLeds(req, res) {
		try {
			const { hue, saturation, value } = req.body;
			// Construct URL with path variables
			const url = `http://192.168.4.1:8080/esp32/setLeds/${hue}/${saturation}/${value}`;
			// Send GET request with Axios
			const response = await axios.get(url);
			res.json(response.data);
		} catch (error) {
			res.status(500).json({ error: error.message });
		}
	},

	async toggleBlink(req, res) {
		try {
			// Implement logic to toggle LED blinking
			res.json({ message: "LED blinking toggled" });
		} catch (error) {
			res.status(500).json({ error: error.message });
		}
	},

	async checkNextMeeting(req, res) {
		try {
			// Get current date and time
			const currentDate = new Date();

			// Get all rooms using getAllRoomsLed
			const rooms = await roomController.getAllRoomsLed();

			// Iterate over each room
			for (const room of rooms) {
				// Get meetings for the current room on the current date
				const meetings = await meetingController.getMeetingsByRoomDateLed(
					room.roomID,
					currentDate.toISOString().split("T")[0]
				);

				// Iterate over meetings to find the next one
				for (const meeting of meetings) {
					const meetingStartDate = new Date(
						meeting.meetingDate + "T" + meeting.meetingStart
					);
					const meetingEndDate = new Date(
						meeting.meetingDate + "T" + meeting.meetingEnd
					);

					// Check if the meeting starts within the next 15 minutes and has not already started
					if (
						meetingStartDate.getTime() > currentDate.getTime() &&
						meetingStartDate.getTime() - currentDate.getTime() <= 15 * 60 * 1000
					) {
						console.log(`Meeting in 15 minutes in ${room.roomName} - Yellow`);
						// Execute setMeetingLed with yellow color
						await this.setMeetingLed("yellow");
					}

					// Check if the meeting is ongoing
					if (
						currentDate >= meetingStartDate &&
						currentDate <= meetingEndDate
					) {
						console.log(`Meeting ongoing in ${room.roomName} - Red`);
						// Execute setMeetingLed with red color
						await this.setMeetingLed("red");
					}

					// Check if the meeting has ended within the last 15 minutes
					if (
						currentDate > meetingEndDate &&
						currentDate.getTime() - meetingEndDate.getTime() <= 15 * 60 * 1000
					) {
						console.log(`Meeting ended in ${room.roomName} - Green`);
						// Execute setMeetingLed with green color for 15 minutes
						await this.setMeetingLed("green");
					}
				}
			}
		} catch (error) {
			console.error("Error checking next meeting:", error);
		}
	},

	async setLedsUI(req, res) {
		try {
			const { microEspIP, hue, saturation, value } = req.body;
			console.log(req.body);

			// Construct URL with query parameters
			const url = `http://${microEspIP}/esp32/setLeds?hue=${hue}&saturation=${saturation}&value=${value}`;
			// Send GET request with Axios
			const response = await axios.get(url);
			res.json(response.data);
		} catch (error) {
			res.status(500).json({ error: error.message });
		}
	},
};

---------

you may need to use the following routers&model, if not thats fine:
roomRouter.js:
// roomRouter.js

const express = require("express");
const router = express.Router();
const { roomController } = require("../controllers/roomController");
const { cookies } = require("../middlewares/auth/auth"); // Import the cookies object from auth.js
const { createRoomValidator } = require("../validators/roomValidator");

// Route for creating a room
router.post(
	"/create",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	createRoomValidator,
	roomController.createRoom
);

// Route to get all rooms
router.get("/rooms", cookies.verifyAndAttachUser, roomController.getAllRooms); // Using verifyAndAttachUser middleware from cookies object

// Route to get a room by ID
router.get(
	"/search/roomID/:roomID",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.getRoomByID
);

// Route to get a room by name
router.get(
	"/search/roomName/:roomName",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.getRoomByName
);

// Route to delete a room by ID
router.delete(
	"/delete/roomID/:roomID",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.deleteRoomByID
);

// Route to delete a room by name
router.delete(
	"/delete/roomName/:roomName",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.deleteRoomByName
);

module.exports = router;


microEspRouter.js:
const express = require("express");
const router = express.Router();
const { microEspController } = require("../controllers/microEspController");

// Route for creating a MicroEsp
router.post("/add", microEspController.addMicroEsp);

// Route to get all MicroEsps
router.get("/microesp", microEspController.getAllMicroEsp);

// Route to get a MicroEsp by IP
router.get("/search/microEspIP/:microEspIP", microEspController.getMicroEspIP);

// Route to get a MicroEsp by ID
router.get("/search/microEspID/:microEspID", microEspController.getMicroEspID);

// Route to delete a MicroEsp by ID
router.delete("/delete/microEspID/:microEspID", microEspController.deleteMicroEspID);

// Route to delete a MicroEsp by IP and roomID
router.delete("/delete/microEspIPRoomID/:microEspIP/:roomID", microEspController.deleteMicroEspIPRoomID);

module.exports = router;


roomModel.js:
module.exports = (sequelize, DataTypes) => {
	const Room = sequelize.define(`room`, {
		roomID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		roomName: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
		minPermission: {
			type: DataTypes.INTEGER,
			allowNull: false,
		},
		department: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
	});

	return Room;
};


microEspModel.js:
module.exports = (sequelize, DataTypes) => {
	const MicroEsp = sequelize.define(`microEsp`, {
		microEspID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		microEspIP: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
		microEspLed: {
			type: DataTypes.BOOLEAN, // True = esp inside led bar, False = inside button box
			allowNull: false,
		},
		roomID: {
			type: DataTypes.INTEGER,
			allowNull: false,
			references: {
				model: "rooms",
				key: "roomID",
			},
		},
	});

	return MicroEsp;
};


here is the file structure for context:
â”£ ğŸ“‚.vscode
â”ƒ â”— ğŸ“œsettings.json
â”£ ğŸ“‚configs
â”ƒ â”£ ğŸ“œdbConfig.js
â”ƒ â”— ğŸ“œinfo.md
â”£ ğŸ“‚controllers
â”ƒ â”£ ğŸ“œinfo.md
â”ƒ â”£ ğŸ“œledController.js
â”ƒ â”£ ğŸ“œmeetingController.js
â”ƒ â”£ ğŸ“œmicroEspController.js
â”ƒ â”£ ğŸ“œroomController.js
â”ƒ â”— ğŸ“œuserController.js
â”£ ğŸ“‚middlewares
â”ƒ â”£ ğŸ“‚auth
â”ƒ â”ƒ â”£ ğŸ“œauth.js
â”ƒ â”ƒ â”— ğŸ“œinfo.md
â”ƒ â”£ ğŸ“‚dtos
â”ƒ â”ƒ â”£ ğŸ“œappInfoDTO.js
â”ƒ â”ƒ â”£ ğŸ“œmeetingDTO.js
â”ƒ â”ƒ â”£ ğŸ“œpermissionDTO.js
â”ƒ â”ƒ â”£ ğŸ“œroomDTO.js
â”ƒ â”ƒ â”— ğŸ“œuserDTO.js
â”ƒ â”£ ğŸ“‚responses
â”ƒ â”ƒ â”£ ğŸ“œauthenticationResponse.js
â”ƒ â”ƒ â”£ ğŸ“œerrorResponse.js
â”ƒ â”ƒ â”£ ğŸ“œpermissionResponse.js
â”ƒ â”ƒ â”£ ğŸ“œresourceResponse.js
â”ƒ â”ƒ â”£ ğŸ“œsuccessResponse.js
â”ƒ â”ƒ â”— ğŸ“œvalidationResponse.js
â”ƒ â”— ğŸ“œinfo.md
â”£ ğŸ“‚models
â”ƒ â”£ ğŸ“œinfo.md
â”ƒ â”£ ğŸ“œmeetingModel.js
â”ƒ â”£ ğŸ“œmicroEspModel.js
â”ƒ â”£ ğŸ“œroomModel.js
â”ƒ â”— ğŸ“œuserModel.js
â”£ ğŸ“‚public
â”ƒ â”£ ğŸ“‚css
â”ƒ â”ƒ â”£ ğŸ“œdashboard.css
â”ƒ â”ƒ â”£ ğŸ“œleds.css
â”ƒ â”ƒ â”£ ğŸ“œlogin.css
â”ƒ â”ƒ â”£ ğŸ“œmeetings.css
â”ƒ â”ƒ â”£ ğŸ“œregister.css
â”ƒ â”ƒ â”— ğŸ“œrooms.css
â”ƒ â”£ ğŸ“‚html
â”ƒ â”ƒ â”£ ğŸ“œdashboard.html
â”ƒ â”ƒ â”£ ğŸ“œleds.html
â”ƒ â”ƒ â”£ ğŸ“œlogin.html
â”ƒ â”ƒ â”£ ğŸ“œmeetings.html
â”ƒ â”ƒ â”£ ğŸ“œregister.html
â”ƒ â”ƒ â”— ğŸ“œrooms.html
â”ƒ â”£ ğŸ“‚js
â”ƒ â”ƒ â”£ ğŸ“œdashboard.js
â”ƒ â”ƒ â”£ ğŸ“œleds.js
â”ƒ â”ƒ â”£ ğŸ“œlogin.js
â”ƒ â”ƒ â”£ ğŸ“œmeetings.js
â”ƒ â”ƒ â”£ ğŸ“œregister.js
â”ƒ â”ƒ â”— ğŸ“œrooms.js
â”ƒ â”£ ğŸ“œindex.html
â”ƒ â”— ğŸ“œinfo.md
â”£ ğŸ“‚routers
â”ƒ â”£ ğŸ“œauthRouter.js
â”ƒ â”£ ğŸ“œinfo.md
â”ƒ â”£ ğŸ“œledRouter.js
â”ƒ â”£ ğŸ“œmeetingRouter.js
â”ƒ â”£ ğŸ“œmicroEspRouter.js
â”ƒ â”£ ğŸ“œroomRouter.js
â”ƒ â”— ğŸ“œuserRouter.js
â”£ ğŸ“‚validators
â”ƒ â”£ ğŸ“œinfo.md
â”ƒ â”£ ğŸ“œmeetingValidator.js
â”ƒ â”£ ğŸ“œroomValidator.js
â”ƒ â”— ğŸ“œuserValidator.js
â”£ ğŸ“œ.env
â”£ ğŸ“œ.gitignore
â”£ ğŸ“œpackage.json
â”— ğŸ“œserver.js

