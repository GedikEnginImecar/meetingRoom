meetings.js:
// Function to handle window onload event
window.onload = async function () {
	try {
		const decodedToken = await decodeToken();

		if (decodedToken) {
			// If token is decoded successfully, use the decoded information
			console.log("Decoded Token:", decodedToken);
			loadRooms();
		} else {
			// If token decoding fails or not found
			alert("Failed to decode token or token not found");
		}
	} catch (error) {
		console.error("Error:", error);
		alert("Error decoding token");
	}
};

// Function to decode token by making a request to the server
async function decodeToken() {
	const response = await fetch("/auth/decodeToken", {
		credentials: "include", // Important for including cookies in the request
	});
	if (response.ok) {
		const data = await response.json();
		const decodedToken = data.decoded;
		if (decodedToken) {
			// Populate the userID field in the HTML
			document.getElementById("userID").value = decodedToken.userID;
		}
		return decodedToken;
	} else {
		console.error("Failed to decode token:", response.statusText);
		return null;
	}
}

async function loadRooms() {
	try {
		const response = await fetch("/room/rooms"); // Fetch all rooms
		if (!response.ok) {
			throw new Error("Failed to fetch rooms");
		}
		const rooms = await response.json();
		const roomSelect = document.getElementById("roomSelect");
		rooms.forEach((room) => {
			const option = document.createElement("option");
			option.value = room.roomID;
			option.textContent = `${room.roomName} - ${room.department}`;
			roomSelect.appendChild(option);
		});

		// Automatically select the nearest past Monday as the starting date
		const currentDate = new Date();
		const dayOfWeek = currentDate.getDay();
		const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
		const startOfWeek = new Date(currentDate);
		startOfWeek.setDate(currentDate.getDate() - daysToMonday);
		document.getElementById("startDate").value = startOfWeek
			.toISOString()
			.split("T")[0];

		// Load the calendar
		await loadCalendar();
	} catch (error) {
		console.error("Error loading rooms:", error.message);
	}
}

async function loadCalendar(roomID, startDate) {
	try {
		if (!roomID) {
			roomID = document.getElementById("roomSelect").value;
		}
		if (!startDate) {
			startDate = document.getElementById("startDate").value;
		}

		const endDate = addDays(startDate, 6);
		const response = await fetch(
			`/meeting/search/between/${startDate}/${endDate}/${roomID}`
		);
		if (!response.ok) {
			throw new Error("Failed to fetch meetings");
		}
		const meetings = await response.json();
		renderCalendar(meetings, startDate);
	} catch (error) {
		console.error("Error loading calendar:", error.message);
	}
}

function renderCalendar(meetings, startDate) {
	const calendar = document.getElementById("calendar");
	calendar.innerHTML = ""; // Clear previous calendar

	const daysOfWeek = [
		"Monday",
		"Tuesday",
		"Wednesday",
		"Thursday",
		"Friday",
		"Saturday",
		"Sunday",
	];

	for (let i = 0; i < 7; i++) {
		const currentDate = new Date(startDate);
		currentDate.setDate(currentDate.getDate() + i);

		const dayDiv = document.createElement("div");
		dayDiv.classList.add("day");
		dayDiv.textContent = `${
			daysOfWeek[i]
		} (${currentDate.toLocaleDateString()})`;

		meetings.forEach((meeting) => {
			const meetingDate = new Date(meeting.meetingDate);
			if (meetingDate.toDateString() === currentDate.toDateString()) {
				const meetingDiv = document.createElement("div");
				meetingDiv.classList.add("meeting");
				meetingDiv.textContent = `${meeting.meetingStart} - ${meeting.meetingEnd}`;
				meetingDiv.setAttribute("data-meeting-id", meeting.meetingID); // Add meeting ID as data attribute
				meetingDiv.addEventListener("click", () => {
					handleMeetingSelection(meeting.meetingID); // Call handleMeetingSelection with meeting ID on click
				});

				dayDiv.appendChild(meetingDiv);
			}
		});

		calendar.appendChild(dayDiv);
	}

	// Display selected meetings in the "View/Delete Meetings" section
	displaySelectedMeetings(meetings);
}

function addDays(dateString, days) {
	const date = new Date(dateString);
	date.setDate(date.getDate() + days);
	return date.toISOString().split("T")[0];
}

function prevWeek() {
	const startDate = document.getElementById("startDate").value;
	const newStartDate = addDays(startDate, -7); // Subtract 7 days to go to previous week
	document.getElementById("startDate").value = newStartDate;
	loadCalendar();
}

function nextWeek() {
	const startDate = document.getElementById("startDate").value;
	const newStartDate = addDays(startDate, 7); // Add 7 days to go to next week
	document.getElementById("startDate").value = newStartDate;
	loadCalendar();
}

function validateDate() {
	const selectedDate = new Date(document.getElementById("startDate").value);
	const dayOfWeek = selectedDate.getDay();

	if (dayOfWeek !== 1) {
		alert("Please select a Monday.");
		const currentDate = new Date();
		const dayDiff = (currentDate.getDay() - 1 + 7) % 7;
		const lastMonday = new Date(currentDate);
		lastMonday.setDate(currentDate.getDate() - dayDiff);
		document.getElementById("startDate").value = lastMonday
			.toISOString()
			.split("T")[0];
	} else {
		loadCalendar(); // Load calendar when a Monday is selected
	}
}

// Function to handle meeting selection
function handleMeetingSelection(meetingID) {
	const selectedMeeting = document.querySelector(
		`[data-meeting-id="${meetingID}"]`
	);
	selectedMeeting.classList.toggle("selected");
	// Add your logic here to handle the selected meeting
}

// Function to display selected meetings in the "View/Delete Meetings" section
function displaySelectedMeetings(meetings) {
	const meetingsList = document.querySelector(".meetings-list");
	meetingsList.innerHTML = ""; // Clear previous meetings

	meetings.forEach((meeting) => {
		const meetingItem = document.createElement("div");
		meetingItem.textContent = `${meeting.meetingStart} - ${meeting.meetingEnd}`;
		meetingsList.appendChild(meetingItem);
	});
}

// Function to delete selected meetings
async function deleteSelectedMeetings() {
	const selectedMeetings = document.querySelectorAll(".selected");
	const meetingIDs = Array.from(selectedMeetings).map((meeting) =>
		meeting.getAttribute("data-meeting-id")
	);

	try {
		for (const meetingID of meetingIDs) {
			const response = await fetch(`/meeting/delete/meetingID/${meetingID}`, {
				method: "DELETE",
			});
			if (!response.ok) {
				throw new Error(`Failed to delete meeting with ID ${meetingID}`);
			}
		}
		// Reload the calendar after deleting meetings
		loadCalendar();
	} catch (error) {
		console.error("Error deleting meetings:", error.message);
	}
}

// Function to create a meeting
async function createMeeting() {
	try {
		const userID = document.getElementById("userID").value;
		const roomID = document.getElementById("roomSelect").value;
		const meetingDate = document.getElementById("meetingDate").value;
		const meetingStart = document.getElementById("meetingStart").value;
		const meetingEnd = document.getElementById("meetingEnd").value;

		const response = await fetch("/meeting/create", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				userID,
				roomID,
				meetingDate,
				meetingStart,
				meetingEnd,
			}),
		});

		const data = await response.json();

		if (!response.ok) {
			throw new Error(data.message || "Failed to create meeting");
		}

		// Reload the calendar after creating the meeting
		loadCalendar();
	} catch (error) {
		console.error("Error creating meeting:", error.message);
		alert("Failed to create meeting: " + error.message);
	}
}

document
	.getElementById("roomSelect")
	.addEventListener("change", async function () {
		await loadCalendar(); // Trigger loading meetings for the selected room and current date range
	});


auth.js:
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { serialize, parse } = require("cookie");
require("dotenv").config();

// Load environment variables
const JWT_SECRET = process.env.JWT_SECRET;
const REFRESH_TOKEN_SECRET = process.env.REFRESH_TOKEN_SECRET;

// Number of salt rounds for password hashing
const saltRounds = 10;

exports.auth = {
	// Functions related to authentication (password hashing and verification)
	async hashPassword(password) {
		return await bcrypt.hash(password, saltRounds);
	},

	async checkPassword(password, hashedPassword) {
		return await bcrypt.compare(password, hashedPassword);
	},
};

exports.tokens = {
	// Functions related to tokens
	async generateAccessToken(userID) {
		return jwt.sign({ userID }, JWT_SECRET, { expiresIn: "15m" });
	},

	async generateRefreshToken(userID) {
		return jwt.sign({ userID }, REFRESH_TOKEN_SECRET, { expiresIn: "1.5h" });
	},
};

exports.cookies = {
	// Functions related to cookies
	async parseCookies(cookieHeader) {
		return parse(cookieHeader);
	},

	async verifyAndAttachUser(req, res, next) {
		const cookieHeader = req.headers.cookie;
		if (!cookieHeader) {
			return res.status(401).json({ message: "No cookies sent" });
		}

		const cookies = parse(cookieHeader);
		const token = cookies.token;

		if (!token) {
			return res.status(401).json({ message: "Token not found in cookies" });
		}

		try {
			const decoded = jwt.verify(token, JWT_SECRET);
			req.user = decoded; // Attach the decoded token to the request object
			next();
		} catch (error) {
			return res.status(400).json({ message: "Invalid token" });
		}
	},
};


authRouter.js:
const express = require("express");
const jwt = require("jsonwebtoken");
const cookieParser = require("cookie-parser"); // Import cookie-parser
const { cookies } = require("../middlewares/auth/auth");
const router = express.Router();

// Middleware to parse cookies
router.use(cookieParser());

// Route to decode the token cookie
router.get("/decodeToken", cookies.verifyAndAttachUser, (req, res) => {
	const decoded = req.user;
	res.json({ decoded });
});

module.exports = router;


meetingController.js:
// meetingController.js

const {
	Meeting,
	Room,
	User,
	connect,
	sequelize,
} = require("../configs/dbConfig");
const { Op } = require("sequelize");

exports.meetingController = {
	async createMeeting(req, res) {
		await connect();
		try {
			const { userID, roomID, meetingDate, meetingStart, meetingEnd } =
				req.body;

			// Check if the user has permission to create a meeting in the specified room

			const room = await Room.findByPk(roomID);
			const user = await User.findByPk(userID);

			if (!room || user.permission > room.minPermission) {
				return res.status(403).json({
					message: "Insufficient clearance to create a meeting in this room",
				});
			}

			// this is where you would try to get userID from the encrypted cookie and attempt to decrypt it to create a meeting
			// currently pass userID into it manually

			// Create the meeting
			const meeting = await Meeting.create({
				userID,
				roomID,
				meetingDate,
				meetingStart,
				meetingEnd,
			});

			res.status(201).json(meeting);
		} catch (error) {
			console.error("Error creating meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMeetings(req, res) {
		await connect();
		try {
			const meetings = await Meeting.findAll();
			res.json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getMeetingsByRoomDate(req, res) {
		await connect();
		try {
			const { roomID, meetingDate } = req.params;

			// Find the room by ID
			const room = await Room.findByPk(roomID);
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}

			const meetings = await Meeting.findAll({
				where: { roomID, meetingDate },
			});
			res.json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMeetingsBetween(req, res) {
		await connect();
		try {
			const { queryDateStart, queryDateEnd, roomID } = req.params;

			// Find all meetings between the specified dates
			const meetings = await Meeting.findAll({
				where: {
					meetingDate: {
						[Op.between]: [queryDateStart, queryDateEnd],
					},
					roomID: roomID,
				},
			});

			res.status(200).json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings between dates:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteMeetingByID(req, res) {
		await connect();
		try {
			const { meetingID } = req.params;

			// Find the meeting by ID
			const meeting = await Meeting.findByPk(meetingID);
			if (!meeting) {
				return res.status(404).json({ message: "Meeting not found" });
			}

			// Check if the user has permission to delete the meeting (assuming permission checks)
			// Additional permission logic can be added here

			// Delete the meeting
			await meeting.destroy();

			res.json({ message: "Meeting deleted successfully" });
		} catch (error) {
			console.error("Error deleting meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteMeetingByInfo(req, res) {
		await connect();
		try {
			const { roomID, meetingDate, meetingStart } = req.params;

			// Find the meeting by ID
			const meeting = await Meeting.findOne({
				where: { roomID, meetingDate, meetingStart },
			});
			if (!meeting) {
				return res.status(404).json({ message: "Meeting not found" });
			}

			// Check if the user has permission to delete the meeting (assuming permission checks)
			// Additional permission logic can be added here

			// Delete the meeting
			await meeting.destroy();

			res.json({ message: "Meeting deleted successfully" });
		} catch (error) {
			console.error("Error deleting meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};


meetingRouter.js:
// meetingRouter.js

const express = require("express");
const router = express.Router();
const { meetingController } = require("../controllers/meetingController");
const { cookies } = require("../middlewares/auth/auth"); // Import the cookies object from auth.js
const { createMeetingValidator } = require("../validators/meetingValidator");

// Route for creating a meeting
router.post(
	"/create",
	cookies.verifyAndAttachUser,
	createMeetingValidator,
	meetingController.createMeeting
);

// Route to get all meetings
router.get(
	"/meetings",
	cookies.verifyAndAttachUser,
	meetingController.getAllMeetings
);

// Route to get all meetings between two dates
router.get(
	"/search/between/:queryDateStart/:queryDateEnd/:roomID",
	cookies.verifyAndAttachUser,
	meetingController.getAllMeetingsBetween
);

// Route to get meetings by room ID
router.get(
	"/search/:roomID/:meetingDate",
	cookies.verifyAndAttachUser,
	meetingController.getMeetingsByRoomDate
);

// Route to delete a meeting by ID
router.delete(
	"/delete/meetingID/:meetingID",
	cookies.verifyAndAttachUser,
	meetingController.deleteMeetingByID
);

// Route to delete a meeting by info
router.delete(
	"/delete/byInfo/:roomID/:meetingDate/:meetingStart",
	cookies.verifyAndAttachUser,
	meetingController.deleteMeetingByInfo
);

module.exports = router;

// DELETE Meeting by ID Example Cycle:
// - Client sends a DELETE request to the server with the meeting ID included in the URL parameter.
// - Express routes the request to the appropriate route handler in meetingRouter.js.
// - The request passes through the auth, which verifies the access token stored in the client's cookies.
// - If the access token is valid, the middleware attaches the decoded user information to the request object.
// - The route handler executes the deleteMeetingByID controller function, which attempts to delete the meeting from the database.
// - The controller interacts with the database to perform the deletion operation.
// - Depending on the outcome, the server sends an appropriate HTTP response back to the client.
// - The client receives the response and updates its interface accordingly.



filestructure of the project:
┣ 📂.vscode
┃ ┗ 📜settings.json
┣ 📂configs
┃ ┣ 📜dbConfig.js
┃ ┗ 📜info.md
┣ 📂controllers
┃ ┣ 📜info.md
┃ ┣ 📜meetingController.js
┃ ┣ 📜roomController.js
┃ ┗ 📜userController.js
┣ 📂middlewares
┃ ┣ 📂auth
┃ ┃ ┣ 📜auth.js
┃ ┃ ┗ 📜info.md
┃ ┣ 📂response
┃ ┃ ┣ 📂dtos
┃ ┃ ┃ ┣ 📜apiErrorLog.dto.js
┃ ┃ ┃ ┣ 📜appInfo.dto.js
┃ ┃ ┃ ┣ 📜company.dto.js
┃ ┃ ┃ ┣ 📜data transfer object info.txt
┃ ┃ ┃ ┣ 📜department.dto.js
┃ ┃ ┃ ┣ 📜module.dto.js
┃ ┃ ┃ ┣ 📜permission.dto.js
┃ ┃ ┃ ┣ 📜role.dto.js
┃ ┃ ┃ ┗ 📜user.dto.js
┃ ┃ ┗ 📂response
┃ ┃   ┣ 📜imecarErrorResponse.js
┃ ┃   ┣ 📜imecarResponse.js
┃ ┃   ┗ 📜info.txt
┃ ┗ 📜info.md
┣ 📂models
┃ ┣ 📜info.md
┃ ┣ 📜meetingModel.js
┃ ┣ 📜roomModel.js
┃ ┗ 📜userModel.js
┣ 📂old
┃ ┣ 📂controllers
┃ ┃ ┣ 📜meetingController.js
┃ ┃ ┣ 📜roomController.js
┃ ┃ ┗ 📜userController.js
┃ ┗ 📂public
┃   ┣ 📜meetings.js
┃   ┣ 📜register.html
┃   ┗ 📜register.js
┣ 📂public
┃ ┣ 📂css
┃ ┃ ┣ 📜dashboard.css
┃ ┃ ┣ 📜login.css
┃ ┃ ┣ 📜meetings.css
┃ ┃ ┣ 📜register.css
┃ ┃ ┗ 📜rooms.css
┃ ┣ 📂html
┃ ┃ ┣ 📜dashboard.html
┃ ┃ ┣ 📜login.html
┃ ┃ ┣ 📜meetings.html
┃ ┃ ┣ 📜register.html
┃ ┃ ┗ 📜rooms.html
┃ ┣ 📂js
┃ ┃ ┣ 📜dashboard.js
┃ ┃ ┣ 📜login.js
┃ ┃ ┣ 📜meetings.js
┃ ┃ ┣ 📜register.js
┃ ┃ ┗ 📜rooms.js
┃ ┣ 📜index.html
┃ ┗ 📜info.md
┣ 📂routers
┃ ┣ 📜authRouter.js
┃ ┣ 📜info.md
┃ ┣ 📜meetingRouter.js
┃ ┣ 📜roomRouter.js
┃ ┗ 📜userRouter.js
┣ 📂temp
┃ ┣ 📜temp.txt
┃ ┣ 📜temp10.txt
┃ ┣ 📜temp11.txt
┃ ┣ 📜temp12.txt
┃ ┣ 📜temp13.txt
┃ ┣ 📜temp14.txt
┃ ┣ 📜temp15.txt
┃ ┣ 📜temp16.txt
┃ ┣ 📜temp17.txt
┃ ┣ 📜temp18.txt
┃ ┣ 📜temp19.txt
┃ ┣ 📜temp2.txt
┃ ┣ 📜temp20.txt
┃ ┣ 📜temp21.txt
┃ ┣ 📜temp22.txt
┃ ┣ 📜temp23.txt
┃ ┣ 📜temp3.txt
┃ ┣ 📜temp4.txt
┃ ┣ 📜temp5.txt
┃ ┣ 📜temp6.txt
┃ ┣ 📜temp7.txt
┃ ┣ 📜temp8.txt
┃ ┗ 📜temp9.txt
┣ 📂validators
┃ ┣ 📜info.md
┃ ┣ 📜meetingValidator.js
┃ ┣ 📜roomValidator.js
┃ ┗ 📜userValidator.js
┣ 📜.env
┣ 📜.gitignore
┣ 📜package.json
┣ 📜server.js
┗ 📜test.js
