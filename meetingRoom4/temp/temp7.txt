when in the dashboard, i want users to be able to choose between the meeting, room and calender buttons, they exist thats fine.
when they select them i want them to be redirected to said page.

in room, i want them to have 2 containers,
container 1 - i want a box where it contains all the rooms in the database, formatted such that it looks like "room name - minimum permission - room id".
the box should be a set size, and if there are more rooms that the container can hold, users should be able to scroll up and down. there should also be a button called "delete room"

if they press on a room, they can "select" it, and then press delete, it deletes that room.


container 2 - i want them to be able to create rooms.
i want it to be able to take in the neccessary fields, youll see which fields below when i give you the relevant model
there should be a button at the bottom called "create room", which creates the room they just input the info for

the file structure is as follows for the project, please keep it in mind when redirecting, calling functions, etc:

â”£ ðŸ“‚.vscode
â”ƒ â”— ðŸ“œsettings.json
â”£ ðŸ“‚auth
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚configs
â”ƒ â”£ ðŸ“œdbConfig.js
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚controllers
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingController.js
â”ƒ â”£ ðŸ“œroomController.js
â”ƒ â”— ðŸ“œuserController.js
â”£ ðŸ“‚middlewares
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚models
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingModel.js
â”ƒ â”£ ðŸ“œroomModel.js
â”ƒ â”— ðŸ“œuserModel.js
â”£ ðŸ“‚old
â”ƒ â”£ ðŸ“œmeetingController.js
â”ƒ â”£ ðŸ“œroomController.js
â”ƒ â”— ðŸ“œuserController.js
â”£ ðŸ“‚public
â”ƒ â”£ ðŸ“‚html
â”ƒ â”ƒ â”£ ðŸ“œcalender.html
â”ƒ â”ƒ â”£ ðŸ“œdashboard.html
â”ƒ â”ƒ â”£ ðŸ“œlogin.html
â”ƒ â”ƒ â”£ ðŸ“œmeetings.html
â”ƒ â”ƒ â”£ ðŸ“œregister.html
â”ƒ â”ƒ â”— ðŸ“œrooms.html
â”ƒ â”£ ðŸ“‚js
â”ƒ â”ƒ â”£ ðŸ“œcalender.js
â”ƒ â”ƒ â”£ ðŸ“œdashboard.js
â”ƒ â”ƒ â”£ ðŸ“œlogin.js
â”ƒ â”ƒ â”£ ðŸ“œmeetings.js
â”ƒ â”ƒ â”£ ðŸ“œregister.js
â”ƒ â”ƒ â”— ðŸ“œrooms.js
â”ƒ â”£ ðŸ“œindex.html
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚routers
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingRouter.js
â”ƒ â”£ ðŸ“œroomRouter.js
â”ƒ â”— ðŸ“œuserRouter.js
â”£ ðŸ“‚temp
â”ƒ â”£ ðŸ“œtemp.txt
â”ƒ â”£ ðŸ“œtemp2.txt
â”ƒ â”£ ðŸ“œtemp3.txt
â”ƒ â”£ ðŸ“œtemp4.txt
â”ƒ â”£ ðŸ“œtemp5.txt
â”ƒ â”£ ðŸ“œtemp6.txt
â”ƒ â”— ðŸ“œtemp7.txt
â”£ ðŸ“‚validators
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingValidator.js
â”ƒ â”£ ðŸ“œroomValidator.js
â”ƒ â”— ðŸ“œuserValidator.js
â”£ ðŸ“œ.env
â”£ ðŸ“œ.gitignore
â”£ ðŸ“œpackage.json
â”£ ðŸ“œserver.js
â”— ðŸ“œtest.js


code:


dbConfig.js
const { Sequelize } = require("sequelize");
const userModel = require("../models/userModel");
const roomModel = require("../models/roomModel");
const meetingModel = require("../models/meetingModel");
require("dotenv").config();

const sequelize = new Sequelize({
	host: process.env.DB_HOST,
	username: process.env.DB_USER,
	password: process.env.DB_PASSWORD,
	database: process.env.DB_NAME,
	dialect: process.env.DB_DIALECT,
	pool: {
		max: 5,
		min: 0,
		acquire: 30000,
		idle: 10000,
	},
});

const User = userModel(sequelize, Sequelize);
const Room = roomModel(sequelize, Sequelize);
const Meeting = meetingModel(sequelize, Sequelize);

// Define associations
User.hasMany(Meeting, { foreignKey: "userID" });
Meeting.belongsTo(User, { foreignKey: "userID" });

Room.hasMany(Meeting, { foreignKey: "roomID" });
Meeting.belongsTo(Room, { foreignKey: "roomID" });

// Custom Sync function to ensure correct order of table creation
async function customSync() {
	try {
		await sequelize.authenticate();
		console.log("Connection has been established successfully.");

		// Sync Users and Rooms first
		await User.sync({ force: false });
		console.log("Users table synced successfully.");

		await Room.sync({ force: false });
		console.log("Rooms table synced successfully.");

		// Sync Meetings last to ensure foreign keys are available
		await Meeting.sync({ force: false });
		console.log("Meetings table synced successfully.");

		console.log("All tables synced successfully.");
	} catch (error) {
		console.error("Error syncing tables: ", error);
	}
}

// Call customSync to start the synchronization process to allow the
customSync();

// Connect function
async function connect() {
	try {
		await sequelize.authenticate();
		console.log("Connection has been established successfully.");
	} catch (error) {
		console.error("Unable to connect to the database:", error);
	}
}

// Close function
async function close() {
	try {
		await sequelize.close();
		console.log("Connection has been closed successfully.");
	} catch (error) {
		console.error("Unable to close the database connection:", error);
	}
}

module.exports = { sequelize, User, Room, Meeting, connect, close };


roomController.js:
// userController.js

const { User, connect } = require("../configs/dbConfig"); // importing relevant model (with sequelize) from dbconfig

exports.userController = {
	// Controller function to register a new user
	async register(req, res) {
		await connect();
		try {
			// Check if a user with the same username already exists
			const existingUser = await User.findOne({
				where: { username: req.body.username },
			});
			if (existingUser) {
				return res.status(400).json({ message: "Username is already taken" });
			}

			// Create a new user in the database
			const newUser = await User.create({
				username: req.body.username,
				password: req.body.password, // Make sure to hash the password before storing it in the database
				permission: req.body.permission,
				department: req.body.department,
			});

			res.status(201).json(newUser);
		} catch (error) {
			console.error("Error registering user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to login a user
	async login(req, res) {
		await connect();
		try {
			const { username, password } = req.body;

			// Find the user in the database
			const user = await User.findOne({
				where: { username: req.body.username },
			});

			// Verify password
			if (!user || user.password !== password) {
				return res
					.status(401)
					.json({ message: "Invalid username or password" });
			}

			res.json(user);
		} catch (error) {
			console.error("Error logging in user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Function to get all users
	async getAllUsers(req, res) {
		await connect();
		try {
			// Retrieve all rooms from the database
			const users = await User.findAll();
			res.json(users);
		} catch (error) {
			console.error("Error retrieving users:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a room by ID
	async getUserByID(req, res) {
		await connect();
		try {
			const { userID } = req.params;
			const user = await User.findByPk(userID);
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}
			res.json(user);
		} catch (error) {
			console.error("Error retrieving user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a user by name
	async getUserByName(req, res) {
		await connect();
		try {
			const { username } = req.params;
			const user = await User.findOne({ where: { username } });
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}
			res.json(user);
		} catch (error) {
			console.error("Error retrieving user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to delete a user by ID
	async deleteUserByID(req, res) {
		await connect();
		try {
			const { userID } = req.params;

			// Find the user by ID
			const user = await User.findByPk(userID);
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}

			// Delete the user
			await user.destroy();

			res.json({ message: "User deleted successfully" });
		} catch (error) {
			console.error("Error deleting user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to delete a user by username
	async deleteUserByName(req, res) {
		await connect();
		try {
			const { username } = req.params;

			// Find the user by username
			const user = await User.findOne({ where: { username } });
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}

			// Delete the user
			await user.destroy();

			res.json({ message: "User deleted successfully" });
		} catch (error) {
			console.error("Error deleting user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};


roomModel.js:
module.exports = (sequelize, DataTypes) => {
	const User = sequelize.define(`user`, {
		userID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		permission: {
			type: DataTypes.INTEGER,
			allowNull: false,
		},
		username: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
		password: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
		department: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
	});

	return User;
};


rooms.html:
nothing inside

rooms.js:
nothing inside


roomRouter.js:
const express = require("express");
const router = express.Router();
const { roomController } = require("../controllers/roomController");
const { createRoomValidator } = require("../validators/roomValidator");

// Route to create a room
router.post("/create", createRoomValidator, roomController.createRoom);

// Route to get all rooms
router.get("/rooms", roomController.getAllRooms);

// Route to get a room by ID
router.get("/search/roomID/:roomID", roomController.getRoomByID);

// Route to get a room by name
router.get("/search/roomName/:roomName", roomController.getRoomByName);

// Route to delete a room by ID
router.delete("/delete/roomID/:roomID", roomController.deleteRoomByID);

// Route to delete a room by name
router.delete("/delete/roomName/:roomName", roomController.deleteRoomByName);

module.exports = router;


roomValidator.js:
const { body, validationResult } = require("express-validator");

// data validation using express validator
// can be done within the database fields,

exports.createRoomValidator = [
	body("roomName").notEmpty().isString(),
	body("minPermission").notEmpty().isIn([0, 1, 2, 3]).toInt(),
	body("department")
		.notEmpty()
		.isIn(["software", "engineering", "design", "owner"]),
	(req, res, next) => {
		validationResult(req);
		const errors = validationResult(req);

		if (!errors.isEmpty()) {
			return res.status(400).json({ errors: errors.array() });
		}
		next();
	},
];


server.js (use only if needed, explain why its needed if youre using it):
const express = require("express");
const userRouter = require("./routers/userRouter");
const roomRouter = require("./routers/roomRouter");
const meetingRouter = require("./routers/meetingRouter");
const { connect } = require("./configs/dbConfig"); // Import the connect function
require("dotenv").config();

const app = express();
const port = process.env.PORT || 8080;

app.use(express.json());
app.use(express.static("public")); // Serve static files from the public directory

app.use("/user", userRouter);
app.use("/room", roomRouter);
app.use("/meeting", meetingRouter);

// Connect to the database when the server starts
connect()
	.then(() => {
		// Start the server after establishing the database connection
		app.listen(port, () => {
			console.log(`Server is running on port ${port}`);
		});
	})
	.catch((error) => {
		console.error("Error connecting to the database:", error);
		process.exit(1); // Exit with error
	});
