this is the project file structure:
â”£ ðŸ“‚.vscode
â”ƒ â”— ðŸ“œsettings.json
â”£ ðŸ“‚configs
â”ƒ â”£ ðŸ“œdbConfig.js
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚controllers
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œledController.js
â”ƒ â”£ ðŸ“œmeetingController.js
â”ƒ â”£ ðŸ“œmicroEspController.js
â”ƒ â”£ ðŸ“œroomController.js
â”ƒ â”— ðŸ“œuserController.js
â”£ ðŸ“‚middlewares
â”ƒ â”£ ðŸ“‚auth
â”ƒ â”ƒ â”£ ðŸ“œauth.js
â”ƒ â”ƒ â”— ðŸ“œinfo.md
â”ƒ â”£ ðŸ“‚dtos
â”ƒ â”ƒ â”£ ðŸ“œappInfoDTO.js
â”ƒ â”ƒ â”£ ðŸ“œmeetingDTO.js
â”ƒ â”ƒ â”£ ðŸ“œpermissionDTO.js
â”ƒ â”ƒ â”£ ðŸ“œroomDTO.js
â”ƒ â”ƒ â”— ðŸ“œuserDTO.js
â”ƒ â”£ ðŸ“‚responses
â”ƒ â”ƒ â”£ ðŸ“œauthenticationResponse.js
â”ƒ â”ƒ â”£ ðŸ“œerrorResponse.js
â”ƒ â”ƒ â”£ ðŸ“œpermissionResponse.js
â”ƒ â”ƒ â”£ ðŸ“œresourceResponse.js
â”ƒ â”ƒ â”£ ðŸ“œsuccessResponse.js
â”ƒ â”ƒ â”— ðŸ“œvalidationResponse.js
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚models
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingModel.js
â”ƒ â”£ ðŸ“œmicroEspModel.js
â”ƒ â”£ ðŸ“œroomModel.js
â”ƒ â”— ðŸ“œuserModel.js
â”£ ðŸ“‚public
â”ƒ â”£ ðŸ“‚css
â”ƒ â”ƒ â”£ ðŸ“œdashboard.css
â”ƒ â”ƒ â”£ ðŸ“œleds.css
â”ƒ â”ƒ â”£ ðŸ“œlogin.css
â”ƒ â”ƒ â”£ ðŸ“œmeetings.css
â”ƒ â”ƒ â”£ ðŸ“œregister.css
â”ƒ â”ƒ â”— ðŸ“œrooms.css
â”ƒ â”£ ðŸ“‚html
â”ƒ â”ƒ â”£ ðŸ“œdashboard.html
â”ƒ â”ƒ â”£ ðŸ“œleds.html
â”ƒ â”ƒ â”£ ðŸ“œlogin.html
â”ƒ â”ƒ â”£ ðŸ“œmeetings.html
â”ƒ â”ƒ â”£ ðŸ“œregister.html
â”ƒ â”ƒ â”— ðŸ“œrooms.html
â”ƒ â”£ ðŸ“‚js
â”ƒ â”ƒ â”£ ðŸ“œdashboard.js
â”ƒ â”ƒ â”£ ðŸ“œleds.js
â”ƒ â”ƒ â”£ ðŸ“œlogin.js
â”ƒ â”ƒ â”£ ðŸ“œmeetings.js
â”ƒ â”ƒ â”£ ðŸ“œregister.js
â”ƒ â”ƒ â”— ðŸ“œrooms.js
â”ƒ â”£ ðŸ“œindex.html
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚routers
â”ƒ â”£ ðŸ“œauthRouter.js
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œledRouter.js
â”ƒ â”£ ðŸ“œmeetingRouter.js
â”ƒ â”£ ðŸ“œmicroEspRouter.js
â”ƒ â”£ ðŸ“œroomRouter.js
â”ƒ â”— ðŸ“œuserRouter.js
â”£ ðŸ“‚validators
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingValidator.js
â”ƒ â”£ ðŸ“œroomValidator.js
â”ƒ â”— ðŸ“œuserValidator.js
â”£ ðŸ“œ.env
â”£ ðŸ“œ.gitignore
â”£ ðŸ“œpackage.json
â”— ðŸ“œserver.js

roomController extract:
const { Room, connect } = require("../configs/dbConfig"); // importing relevant model (with sequelize) from dbconfig

exports.roomController = {
	// Controller functions for room operations

	// Function to get all rooms - router doesn't have authentication so backend LED controllers can use it without cookies
	async getAllRoomsLed() {
		await connect();
		try {
			// Retrieve all rooms from the database
			const rooms = await Room.findAll();
			return rooms;
		} catch (error) {
			console.error("Error retrieving rooms:", error);
			throw error;
		}
	},

};

meetingController extract:

exports.meetingController = {
	async getMeetingsByRoomDateLed(roomID, meetingDate) {
		await connect();
		try {
			// Find the room by ID
			const room = await Room.findByPk(roomID);
			if (!room) {
				throw new Error("Room not found");
			}

			const meetings = await Meeting.findAll({
				where: { roomID, meetingDate },
			});
			return meetings;
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			throw error;
		}
	}
};

roomModel.js:
module.exports = (sequelize, DataTypes) => {
	const Room = sequelize.define(`room`, {
		roomID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		roomName: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
		minPermission: {
			type: DataTypes.INTEGER,
			allowNull: false,
		},
		department: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
	});

	return Room;
};


meetingModel.js:
module.exports = (sequelize, DataTypes) => {
	const Meeting = sequelize.define(`meeting`, {
		meetingID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		meetingDate: {
			type: DataTypes.DATEONLY,
			allowNull: false,
		},
		meetingStart: {
			type: DataTypes.TIME,
			allowNull: false,
		},
		meetingEnd: {
			type: DataTypes.TIME,
			allowNull: false,
		},
		userID: {
			type: DataTypes.INTEGER,
			allowNull: false,
			references: {
				model: "users",
				key: "userID",
			},
		},
		roomID: {
			type: DataTypes.INTEGER,
			allowNull: false,
			references: {
				model: "rooms",
				key: "roomID",
			},
		},
	});
	return Meeting;
};


microEspModel.js:
module.exports = (sequelize, DataTypes) => {
	const MicroEsp = sequelize.define(`microEsp`, {
		microEspID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		microEspIP: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
		microEspLed: {
			type: DataTypes.BOOLEAN, // True = esp inside led bar, False = inside button box
			allowNull: false,
		},
		roomID: {
			type: DataTypes.INTEGER,
			allowNull: false,
			references: {
				model: "rooms",
				key: "roomID",
			},
		},
	});

	return MicroEsp;
};


------


inside of ledController.js there is are 2 functions:
    // we want to build checkNextMeeting
	async checkNextMeeting() {
        ...
        ...
        ...
	},

    // the function to set and control leds
	async setLedsInternal({ microEspIP, hue, saturation, value }) {
		try {
			// Construct URL with path variables
			const url = `http://${microEspIP}/esp32/setLeds/${hue}/${saturation}/${value}`;
			// Send GET request with Axios
			const response = await axios.get(url);
			console.log(response.data); // Log the response data
		} catch (error) {
			console.error("Error setting LEDs internally:", error);
		}
	},


This checkNextMeeting function first gets the current date and time. 
It then fetches all rooms using getAllRoomsLed,from roomController

For each room, it retrieves meetings scheduled for the current date using getMeetingsByRoomDateLed from meetingController

It iterates over each meeting to determine its status relative to the current time:

status 1:
if it falls inbetween the meeting start time and 15 minutes before that (meeting start 1800, before meeting is then 1745), i want setLedsInternal to run for yellow, console log the name of the room, and the time the meeting starts

status 2:
if it falls between the meetings start time and end time, run setLedsInternal for red, console log the name of the room, and how long until meeting ends

status 3:
if it is after the meeting (meeting end is 1815, then after meeting is up to 1830), during that 15 min window i want setLedsInternal - green, console log the name of the room, and how much time has elapsed since meeting ended

status 1 should start 15 minutes before meeting starts
status 2 should be the entire length of the meeting
status 3 should last 15 minutes from the end of the meeting