okay onto a different topic now,

i have this file structurem ive left the key files inside it:
â”£ ðŸ“‚.vscode
â”ƒ â”— ðŸ“œsettings.json
â”£ ðŸ“‚configs
â”ƒ â”£ ðŸ“œdbConfig.js
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚controllers
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œledController.js
â”ƒ â”£ ðŸ“œmeetingController.js
â”ƒ â”£ ðŸ“œmicroEspController.js
â”ƒ â”£ ðŸ“œroomController.js
â”ƒ â”— ðŸ“œuserController.js
â”£ ðŸ“‚public
â”ƒ â”£ ðŸ“‚css
â”ƒ â”ƒ â”£ ðŸ“œdashboard.css
â”ƒ â”ƒ â”£ ðŸ“œleds.css
â”ƒ â”ƒ â”£ ðŸ“œlogin.css
â”ƒ â”ƒ â”£ ðŸ“œmeetings.css
â”ƒ â”ƒ â”£ ðŸ“œregister.css
â”ƒ â”ƒ â”— ðŸ“œrooms.css
â”ƒ â”£ ðŸ“‚html
â”ƒ â”ƒ â”£ ðŸ“œdashboard.html
â”ƒ â”ƒ â”£ ðŸ“œleds.html
â”ƒ â”ƒ â”£ ðŸ“œlogin.html
â”ƒ â”ƒ â”£ ðŸ“œmeetings.html
â”ƒ â”ƒ â”£ ðŸ“œregister.html
â”ƒ â”ƒ â”— ðŸ“œrooms.html
â”ƒ â”£ ðŸ“‚js
â”ƒ â”ƒ â”£ ðŸ“œdashboard.js
â”ƒ â”ƒ â”£ ðŸ“œleds.js
â”ƒ â”ƒ â”£ ðŸ“œlogin.js
â”ƒ â”ƒ â”£ ðŸ“œmeetings.js
â”ƒ â”ƒ â”£ ðŸ“œregister.js
â”ƒ â”ƒ â”— ðŸ“œrooms.js
â”ƒ â”£ ðŸ“œindex.html
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚routers
â”ƒ â”£ ðŸ“œauthRouter.js
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œledRouter.js
â”ƒ â”£ ðŸ“œmeetingRouter.js
â”ƒ â”£ ðŸ“œmicroEspRouter.js
â”ƒ â”£ ðŸ“œroomRouter.js
â”ƒ â”— ðŸ“œuserRouter.js
â”£ ðŸ“œ.env
â”£ ðŸ“œ.gitignore
â”£ ðŸ“œpackage.json
â”— ðŸ“œserver.js


in leds.html this is my code:
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0"
		/>
		<title>LED Control and MicroEsp Addition</title>
		<link
			rel="stylesheet"
			href="../css/leds.css"
		/>
	</head>
	<body>
		<main class="main-container">
			<h1 class="main-title">LED Control and MicroEsp Addition</h1>

			<div class="led-control">
				<h2>LED Control</h2>
				<!-- Form for LED Control -->
				<form id="ledControlForm">
					<label for="microEspSelect">Select MicroEsp:</label>
					<select
						name="microEsp"
						id="microEspSelect"
					>
						<option value="">-- Please choose an option --</option>
						<!-- Options will be dynamically populated by JavaScript -->
					</select>

					<label for="hueSlider">Hue:</label>
					<input
						type="range"
						id="hueSlider"
						class="slider"
						min="0"
						max="360"
					/>

					<label for="saturationSlider">Saturation:</label>
					<input
						type="range"
						id="saturationSlider"
						class="slider"
						min="0"
						max="100"
					/>

					<label for="valueSlider">Value:</label>
					<input
						type="range"
						id="valueSlider"
						class="slider"
						min="0"
						max="100"
					/>

					<!-- First Button Row -->
					<div class="button-row">
						<button
							type="button"
							id="redLeds"
						>
							Red LEDs
						</button>
						<button
							type="button"
							id="greenLeds"
						>
							Green LEDs
						</button>
						<button
							type="button"
							id="clearLeds"
						>
							Clear LEDs
						</button>
					</div>

					<!-- Second Button Row -->
					<div class="button-row-2">
						<button
							type="button"
							id="blinkToggleButton"
						>
							Toggle Blink
						</button>
						<button
							type="button"
							id="changeLedButton"
						>
							Change LED Color
						</button>
					</div>
				</form>
			</div>

			<div class="add-microesp">
				<h2>Add MicroEsp</h2>
				<!-- Form for adding MicroEsp -->
				<form id="addMicroEspForm">
					<label for="roomSelect">Room Name:</label>
					<select
						name="room"
						id="roomSelect"
					>
						<option value="">-- Please choose an option --</option>
						<!-- Options will be dynamically populated by JavaScript -->
					</select>

					<label for="deviceTypeSelect">Device Type:</label>
					<select
						name="deviceType"
						id="deviceTypeSelect"
					>
						<option value="ledBar">LED Bar</option>
						<option value="buttonBox">Button Box</option>
					</select>

					<label for="microEspIP">MicroEsp IP:</label>
					<input
						type="text"
						id="microEspIP"
						name="microEspIP"
						required
					/>

					<button type="submit">Add MicroEsp</button>
				</form>
			</div>
		</main>

		<script src="../js/scripts.js"></script>
	</body>
</html>


i need leds.js to be able to take the inputs and listen to then and pass it into microEspRouter.js, which passes it into microEspController.js

microEspRouter:
const express = require("express");
const router = express.Router();
const { microEspController } = require("../controllers/microEspController");

// Route for creating a MicroEsp
router.post("/microesp", microEspController.createMicroEsp);

// Route to get all MicroEsps
router.get("/microesps", microEspController.getAllMicroEsp);

// Route to get a MicroEsp by IP
router.get("/microesp/ip/:microEspIP", microEspController.getMicroEspIP);

// Route to get a MicroEsp by ID
router.get("/microesp/id/:microEspID", microEspController.getMicroEspID);

// Route to delete a MicroEsp by ID
router.delete("/microesp/id/:microEspID", microEspController.deleteMicroEspID);

// Route to delete a MicroEsp by IP
router.delete("/microesp/ip/:microEspIP", microEspController.deleteMicroEspIP);

module.exports = router;




microEspController:
const { MicroEsp, connect } = require("../configs/dbConfig");

exports.microEspController = {
	async createMicroEsp(req, res) {
		await connect();
		try {
			const { microEspIP, microEspLed, roomID } = req.body;
			const newMicroEsp = await MicroEsp.create({
				microEspIP,
				microEspLed,
				roomID,
			});
			res.status(201).json(newMicroEsp);
		} catch (error) {
			console.error("Error creating MicroEsp:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMicroEsp(req, res) {
		await connect();
		try {
			const microEspList = await MicroEsp.findAll();
			res.json(microEspList);
		} catch (error) {
			console.error("Error retrieving MicroEsp:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getMicroEspIP(req, res) {
		await connect();
		try {
			const { microEspIP } = req.params;
			const microEsp = await MicroEsp.findOne({ where: { microEspIP } });
			if (!microEsp) {
				return res.status(404).json({ message: "MicroEsp not found" });
			}
			res.json(microEsp);
		} catch (error) {
			console.error("Error retrieving MicroEsp:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getMicroEspID(req, res) {
		await connect();
		try {
			const { microEspID } = req.params;
			const microEsp = await MicroEsp.findByPk(microEspID);
			if (!microEsp) {
				return res.status(404).json({ message: "MicroEsp not found" });
			}
			res.json(microEsp);
		} catch (error) {
			console.error("Error retrieving MicroEsp:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteMicroEspID(req, res) {
		await connect();
		try {
			const { microEspID } = req.params;
			const deletedMicroEsp = await MicroEsp.destroy({ where: { microEspID } });
			if (!deletedMicroEsp) {
				return res.status(404).json({ message: "MicroEsp not found" });
			}
			res.json({ message: "MicroEsp deleted successfully" });
		} catch (error) {
			console.error("Error deleting MicroEsp:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteMicroEspIP(req, res) {
		await connect();
		try {
			const { microEspIP } = req.params;
			const deletedMicroEsp = await MicroEsp.destroy({ where: { microEspIP } });
			if (!deletedMicroEsp) {
				return res.status(404).json({ message: "MicroEsp not found" });
			}
			res.json({ message: "MicroEsp deleted successfully" });
		} catch (error) {
			console.error("Error deleting MicroEsp:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};



microEspModel:
module.exports = (sequelize, DataTypes) => {
	const MicroEsp = sequelize.define(`MicroEsp`, {
		microEspID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		microEspIP: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
		microEspLed: {
			type: DataTypes.BOOLEAN, // True = esp inside led bar, False = inside button box
			allowNull: false,
		},
		roomID: {
			type: DataTypes.INTEGER,
			allowNull: false,
			references: {
				model: "rooms",
				key: "roomID",
			},
		},
	});

	return MicroEsp;
};

