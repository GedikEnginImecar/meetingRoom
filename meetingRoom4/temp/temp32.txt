
this is my meetingController's create and read functions:
// meetingController.js
const {
	Meeting,
	Room,
	User,
	connect,
	sequelize,
} = require("../configs/dbConfig");
const { Op } = require("sequelize");

exports.meetingController = {
	async createMeeting(req, res) {
		await connect();
		try {
			const { userID, roomID, meetingDate, meetingStart, meetingEnd } =
				req.body;

			// Check if the user has permission to create a meeting in the specified room

			const room = await Room.findByPk(roomID);
			const user = await User.findByPk(userID);

			if (!room || user.permission > room.minPermission) {
				return res.status(403).json({
					message: "Insufficient clearance to create a meeting in this room",
				});
			}

			// this is where you would try to get userID from the encrypted cookie and attempt to decrypt it to create a meeting
			// currently pass userID into it manually

			// Create the meeting
			const meeting = await Meeting.create({
				userID,
				roomID,
				meetingDate,
				meetingStart,
				meetingEnd,
			});

			res.status(201).json(meeting);
		} catch (error) {
			console.error("Error creating meeting:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMeetings(req, res) {
		await connect();
		try {
			const meetings = await Meeting.findAll();
			res.json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getMeetingsByRoomDate(req, res) {
		await connect();
		try {
			const { roomID, meetingDate } = req.params;

			// Find the room by ID
			const room = await Room.findByPk(roomID);
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}

			const meetings = await Meeting.findAll({
				where: { roomID, meetingDate },
			});
			res.json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async getAllMeetingsBetween(req, res) {
		await connect();
		try {
			const { queryDateStart, queryDateEnd, roomID } = req.params;

			// Find all meetings between the specified dates
			const meetings = await Meeting.findAll({
				where: {
					meetingDate: {
						[Op.between]: [queryDateStart, queryDateEnd],
					},
					roomID: roomID,
				},
			});

			res.status(200).json(meetings);
		} catch (error) {
			console.error("Error retrieving meetings between dates:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
}


this is the meetingModel:
module.exports = (sequelize, DataTypes) => {
	const Meeting = sequelize.define(`meeting`, {
		meetingID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		meetingDate: {
			type: DataTypes.DATEONLY,
			allowNull: false,
		},
		meetingStart: {
			type: DataTypes.TIME,
			allowNull: false,
		},
		meetingEnd: {
			type: DataTypes.TIME,
			allowNull: false,
		},
		userID: {
			type: DataTypes.INTEGER,
			allowNull: false,
			references: {
				model: "users",
				key: "userID",
			},
		},
		roomID: {
			type: DataTypes.INTEGER,
			allowNull: false,
			references: {
				model: "rooms",
				key: "roomID",
			},
		},
	});
	return Meeting;
};


ledController.js
// can be used to control more advanced led functions that cant easily be defined as preset functions within the cpp code of the esp32
const axios = require("axios");

const stringToHue = {
	blue: 170,
	blueGreen: 127,
	green: 85,
	greenYellow: 42,
	yellow: 21,
	yellowOrange: 15,
	orange: 10,
	orangeRed: 5,
	red: 0,
	redViolet: 213,
	violet: 191,
	violetBlue: 170,
};

exports.ledControls = {
	async setLeds(req, res) {
		try {
			const { hue, saturation, value } = req.body;
			// Construct URL with path variables
			const url = `http://192.168.4.1:8080/esp32/setLeds/${hue}/${saturation}/${value}`;
			// Send GET request with Axios
			const response = await axios.get(url);
			res.json(response.data);
		} catch (error) {
			res.status(500).json({ error: error.message });
		}
	},

	async toggleBlink(req, res) {
		try {
			// Implement logic to toggle LED blinking
			res.json({ message: "LED blinking toggled" });
		} catch (error) {
			res.status(500).json({ error: error.message });
		}
	},

	async checkNextMeeting(req, res) {
		try {
			// Implement logic for another LED control function
			res.json({ message: "checkNextMeeting executed" });
		} catch (error) {
			res.status(500).json({ error: error.message });
		}
	},

	async setMeetingLed(req, res) {
		try {
			// Implement logic for another LED control function
			res.json({ message: "setMeetingLed executed" });
		} catch (error) {
			res.status(500).json({ error: error.message });
		}
	},
};


roomController.js:
const { Room, connect } = require("../configs/dbConfig"); // importing relevant model (with sequelize) from dbconfig

exports.roomController = {
	// Controller functions for room operations
	async createRoom(req, res) {
		await connect();
		try {
			// Extract room data from request body
			const { roomName, minPermission, department } = req.body;

			// Create a new room record in the database
			const newRoom = await Room.create({
				roomName,
				minPermission,
				department,
			});

			res.status(201).json(newRoom);
		} catch (error) {
			console.error("Error creating room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Function to get all rooms
	async getAllRooms(req, res) {
		await connect();
		try {
			// Retrieve all rooms from the database
			const rooms = await Room.findAll();
			res.json(rooms);
		} catch (error) {
			console.error("Error retrieving rooms:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a room by ID
	async getRoomByID(req, res) {
		await connect();
		try {
			const { roomID } = req.params;
			const room = await Room.findByPk(roomID);
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}
			res.json(room);
		} catch (error) {
			console.error("Error retrieving room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a room by name
	async getRoomByName(req, res) {
		await connect();
		try {
			const { roomName } = req.params;
			const room = await Room.findOne({ where: { roomName } });
			if (!room) {
				return res.status(404).json({ message: "Room not found" });
			}
			res.json(room);
		} catch (error) {
			console.error("Error retrieving room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteRoomByID(req, res) {
		await connect();
		try {
			// Extract room ID from request parameters
			const { roomID } = req.params;

			// Find the room by ID and delete it
			const deletedRoom = await Room.destroy({ where: { roomID: roomID } });

			if (!deletedRoom) {
				return res.status(404).json({ message: "Room not found" });
			}

			res.json({ message: "Room deleted successfully" });
		} catch (error) {
			console.error("Error deleting room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async deleteRoomByName(req, res) {
		await connect();
		try {
			// Extract room name from request parameters
			const { roomName } = req.params;

			// Find the room by name and delete it
			const deletedRoom = await Room.destroy({ where: { roomName } });

			if (!deletedRoom) {
				return res.status(404).json({ message: "Room not found" });
			}

			res.json({ message: "Room deleted successfully" });
		} catch (error) {
			console.error("Error deleting room:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};


roomModel.js:
module.exports = (sequelize, DataTypes) => {
	const Room = sequelize.define(`room`, {
		roomID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		roomName: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
		minPermission: {
			type: DataTypes.INTEGER,
			allowNull: false,
		},
		department: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
	});

	return Room;
};


roomRouter.js:
// roomRouter.js

const express = require("express");
const router = express.Router();
const { roomController } = require("../controllers/roomController");
const { cookies } = require("../middlewares/auth/auth"); // Import the cookies object from auth.js
const { createRoomValidator } = require("../validators/roomValidator");

// Route for creating a room
router.post(
	"/create",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	createRoomValidator,
	roomController.createRoom
);

// Route to get all rooms
router.get("/rooms", cookies.verifyAndAttachUser, roomController.getAllRooms); // Using verifyAndAttachUser middleware from cookies object

// Route to get a room by ID
router.get(
	"/search/roomID/:roomID",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.getRoomByID
);

// Route to get a room by name
router.get(
	"/search/roomName/:roomName",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.getRoomByName
);

// Route to delete a room by ID
router.delete(
	"/delete/roomID/:roomID",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.deleteRoomByID
);

// Route to delete a room by name
router.delete(
	"/delete/roomName/:roomName",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.deleteRoomByName
);

module.exports = router;



lets use this as our starting code for the future tasks i will give you okay?