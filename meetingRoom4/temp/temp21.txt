this is the error I am getting:
[nodemon] starting `node server.js`
C:\Users\Administrator\Documents\dev\Imecar\meetingRoom4\routers\userRouter.js:15
        .post("/login", loginValidator, userController.login);
         ^

TypeError: Cannot read properties of undefined (reading 'post')
    at Object.<anonymous> (C:\Users\Administrator\Documents\dev\Imecar\meetingRoom4\routers\userRouter.js:15:3)
    at Module._compile (node:internal/modules/cjs/loader:1376:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1435:10)
    at Module.load (node:internal/modules/cjs/loader:1207:32)
    at Module._load (node:internal/modules/cjs/loader:1023:12)
    at Module.require (node:internal/modules/cjs/loader:1235:19)
    at require (node:internal/modules/helpers:176:18)
    at Object.<anonymous> (C:\Users\Administrator\Documents\dev\Imecar\meetingRoom4\server.js:2:20)
    at Module._compile (node:internal/modules/cjs/loader:1376:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1435:10)

Node.js v20.10.0
[nodemon] app crashed - waiting for file changes before starting...


this is my file structure:
â”£ ðŸ“‚.vscode
â”ƒ â”— ðŸ“œsettings.json
â”£ ðŸ“‚configs
â”ƒ â”£ ðŸ“œdbConfig.js
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚controllers
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingController.js
â”ƒ â”£ ðŸ“œroomController.js
â”ƒ â”— ðŸ“œuserController.js
â”£ ðŸ“‚middlewares
â”ƒ â”£ ðŸ“‚auth
â”ƒ â”ƒ â”£ ðŸ“œauth.js
â”ƒ â”ƒ â”— ðŸ“œinfo.md
â”ƒ â”£ ðŸ“‚response
â”ƒ â”ƒ â”£ ðŸ“‚dtos
â”ƒ â”ƒ â”ƒ â”£ ðŸ“œapiErrorLog.dto.js
â”ƒ â”ƒ â”ƒ â”£ ðŸ“œappInfo.dto.js
â”ƒ â”ƒ â”ƒ â”£ ðŸ“œcompany.dto.js
â”ƒ â”ƒ â”ƒ â”£ ðŸ“œdata transfer object info.txt
â”ƒ â”ƒ â”ƒ â”£ ðŸ“œdepartment.dto.js
â”ƒ â”ƒ â”ƒ â”£ ðŸ“œmodule.dto.js
â”ƒ â”ƒ â”ƒ â”£ ðŸ“œpermission.dto.js
â”ƒ â”ƒ â”ƒ â”£ ðŸ“œrole.dto.js
â”ƒ â”ƒ â”ƒ â”— ðŸ“œuser.dto.js
â”ƒ â”ƒ â”— ðŸ“‚response
â”ƒ â”ƒ   â”£ ðŸ“œimecarErrorResponse.js
â”ƒ â”ƒ   â”£ ðŸ“œimecarResponse.js
â”ƒ â”ƒ   â”— ðŸ“œinfo.txt
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚models
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingModel.js
â”ƒ â”£ ðŸ“œroomModel.js
â”ƒ â”— ðŸ“œuserModel.js
â”£ ðŸ“‚public
â”ƒ â”£ ðŸ“‚css
â”ƒ â”ƒ â”£ ðŸ“œdashboard.css
â”ƒ â”ƒ â”£ ðŸ“œlogin.css
â”ƒ â”ƒ â”£ ðŸ“œmeetings.css
â”ƒ â”ƒ â”£ ðŸ“œregister.css
â”ƒ â”ƒ â”— ðŸ“œrooms.css
â”ƒ â”£ ðŸ“‚html
â”ƒ â”ƒ â”£ ðŸ“œdashboard.html
â”ƒ â”ƒ â”£ ðŸ“œlogin.html
â”ƒ â”ƒ â”£ ðŸ“œmeetings.html
â”ƒ â”ƒ â”£ ðŸ“œregister.html
â”ƒ â”ƒ â”— ðŸ“œrooms.html
â”ƒ â”£ ðŸ“‚js
â”ƒ â”ƒ â”£ ðŸ“œdashboard.js
â”ƒ â”ƒ â”£ ðŸ“œlogin.js
â”ƒ â”ƒ â”£ ðŸ“œmeetings.js
â”ƒ â”ƒ â”£ ðŸ“œregister.js
â”ƒ â”ƒ â”— ðŸ“œrooms.js
â”ƒ â”£ ðŸ“œindex.html
â”ƒ â”— ðŸ“œinfo.md
â”£ ðŸ“‚routers
â”ƒ â”£ ðŸ“œauthRouter.js
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingRouter.js
â”ƒ â”£ ðŸ“œroomRouter.js
â”ƒ â”— ðŸ“œuserRouter.js

â”£ ðŸ“‚validators
â”ƒ â”£ ðŸ“œinfo.md
â”ƒ â”£ ðŸ“œmeetingValidator.js
â”ƒ â”£ ðŸ“œroomValidator.js
â”ƒ â”— ðŸ“œuserValidator.js
â”£ ðŸ“œ.env
â”£ ðŸ“œ.gitignore
â”£ ðŸ“œpackage.json
â”£ ðŸ“œserver.js
â”— ðŸ“œtest.js



here are the key files:
userController.js:
// userController.js

const { User, connect } = require("../configs/dbConfig"); // importing relevant model (with sequelize) from dbconfig
const { auth, tokens, cookies } = require("../middlewares/auth/auth"); // Import the auth object from auth.js

exports.userController = {
	// Controller function to register a new user
	async register(req, res) {
		await connect();
		try {
			const { username, password, permission, department } = req.body;

			// Check if a user with the same username already exists
			const existingUser = await User.findOne({
				where: { username },
			});
			if (existingUser) {
				return res.status(400).json({ message: "Username is already taken" });
			}

			// Hash the password
			const hashedPassword = await auth.hashPassword(password);

			// Create a new user in the database
			const newUser = await User.create({
				username,
				password: hashedPassword,
				permission,
				department,
			});

			res.status(201).json(newUser);
		} catch (error) {
			console.error("Error registering user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	async login(req, res) {
		await connect();
		try {
			const { username, password } = req.body;

			// Find the user in the database
			const user = await User.findOne({
				where: { username },
			});

			if (!user) {
				return res
					.status(401)
					.json({ message: "Invalid username or password" });
			}

			// Check password
			const passwordMatch = await auth.checkPassword(password, user.password);
			if (!passwordMatch) {
				return res
					.status(401)
					.json({ message: "Invalid username or password" });
			}

			// Generate JWT token
			const token = tokens.generateAccessToken(user, res);
			res.json({ token });
		} catch (error) {
			console.error("Error logging in user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Function to get all users
	async getAllUsers(req, res) {
		await connect();
		try {
			// Retrieve all rooms from the database
			const users = await User.findAll();
			res.json(users);
		} catch (error) {
			console.error("Error retrieving users:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a room by ID
	async getUserByID(req, res) {
		await connect();
		try {
			const { userID } = req.params;
			const user = await User.findByPk(userID);
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}
			res.json(user);
		} catch (error) {
			console.error("Error retrieving user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to get a user by name
	async getUserByName(req, res) {
		await connect();
		try {
			const { username } = req.params;
			const user = await User.findOne({ where: { username } });
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}
			res.json(user);
		} catch (error) {
			console.error("Error retrieving user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to delete a user by ID
	async deleteUserByID(req, res) {
		await connect();
		try {
			const { userID } = req.params;

			// Find the user by ID
			const user = await User.findByPk(userID);
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}

			// Delete the user
			await user.destroy();

			res.json({ message: "User deleted successfully" });
		} catch (error) {
			console.error("Error deleting user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},

	// Controller function to delete a user by username
	async deleteUserByName(req, res) {
		await connect();
		try {
			const { username } = req.params;

			// Find the user by username
			const user = await User.findOne({ where: { username } });
			if (!user) {
				return res.status(404).json({ message: "User not found" });
			}

			// Delete the user
			await user.destroy();

			res.json({ message: "User deleted successfully" });
		} catch (error) {
			console.error("Error deleting user:", error);
			res.status(500).json({ message: "Internal server error" });
		}
	},
};


userRouter.js:
const express = require("express");
const router = express.Router();
const { userController } = require("../controllers/userController");

const { auth, tokens, cookies } = require("../middlewares/auth/auth"); // Import auth

const {
	registerValidator,
	loginValidator,
} = require("../validators/userValidator");

// Route for user registration
router.post("/register", registerValidator, userController.register);
cookies.router // Route for user login
	.post("/login", loginValidator, userController.login);

// Route to get all users
router.get("/users", userController.getAllUsers);

// Route to get a user by ID
router.get("/search/userID/:userID", userController.getUserByID);

// Route to get a user by name
router.get("/search/userName/:username", userController.getUserByName);

// Route to delete a user by ID (requires authentication)
router.delete(
	"/delete/userID/:userID",
	cookies.verifyAndAttachUser,
	userController.deleteUserByID
);

// Route to delete a user by username (requires authentication)
router.delete(
	"/delete/userName/:username",
	cookies.verifyAndAttachUser,
	userController.deleteUserByName
);

module.exports = router;

userValidator.js:
const { body, validationResult } = require("express-validator");

// Register Validator
exports.registerValidator = [
	body("username").notEmpty().isString(),
	body("password").notEmpty().isString(),
	body("permission").notEmpty().isIn([0, 1, 2, 3]).toInt(),
	body("department")
		.notEmpty()
		.isIn(["software", "engineering", "design", "owner"]),
	(req, res, next) => {
		const errors = validationResult(req);

		if (!errors.isEmpty()) {
			return res.status(400).json({ errors: errors.array() });
		}
		next();
	},
];

// Login Validator
exports.loginValidator = [
	body("username").notEmpty().isString(),
	body("password").notEmpty().isString(),
	(req, res, next) => {
		const errors = validationResult(req);

		if (!errors.isEmpty()) {
			return res.status(400).json({ errors: errors.array() });
		}
		next();
	},
];


authRouter.js:
const express = require("express");
const jwt = require("jsonwebtoken");
const { verifyAndAttachUser } = require("../middlewares/auth");
const router = express.Router();

// Middleware to parse cookies
router.use(cookieParser());

// Route to decode the token cookie
router.get("/decodeToken", verifyAndAttachUser, (req, res) => {
	const decoded = req.user;
	res.json({ decoded });
});

module.exports = router;

server.js:
const express = require("express");
const userRouter = require("./routers/userRouter");
const roomRouter = require("./routers/roomRouter");
const meetingRouter = require("./routers/meetingRouter");
const authRouter = require("./routers/authRouter"); // Update to authRouter
const { connect } = require("./configs/dbConfig"); // Import the connect function
require("dotenv").config();

const app = express();
const port = process.env.PORT || 8080;

app.use(express.json());
app.use(express.static("public")); // Serve static files from the public directory

app.use("/user", userRouter);
app.use("/room", roomRouter);
app.use("/meeting", meetingRouter);
app.use("/auth", authRouter); // Update to use authRouter

// Connect to the database when the server starts
connect()
	.then(() => {
		// Start the server after establishing the database connection
		app.listen(port, () => {
			console.log(`Server is running on port ${port}`);
		});
	})
	.catch((error) => {
		console.error("Error connecting to the database:", error);
		process.exit(1); // Exit with error
	});


auth.js:
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { serialize, parse } = require("cookie");
require("dotenv").config();

// Load environment variables
const JWT_SECRET = process.env.JWT_SECRET;
const REFRESH_TOKEN_SECRET = process.env.REFRESH_TOKEN_SECRET;

// Number of salt rounds for password hashing
const saltRounds = 10;

exports.auth = {
	// Functions related to authentication (password hashing and verification)
	async hashPassword(password) {
		return await bcrypt.hash(password, saltRounds);
	},

	async checkPassword(password, hashedPassword) {
		return await bcrypt.compare(password, hashedPassword);
	},
};

exports.tokens = {
	// Functions related to tokens
	async generateAccessToken(userID) {
		return jwt.sign({ userID }, JWT_SECRET, { expiresIn: "15m" });
	},

	async generateRefreshToken(userID) {
		return jwt.sign({ userID }, REFRESH_TOKEN_SECRET, { expiresIn: "1.5h" });
	},
};

exports.cookies = {
	// Functions related to cookies
	async parseCookies(cookieHeader) {
		return parse(cookieHeader);
	},

	async verifyAndAttachUser(req, res, next) {
		const cookieHeader = req.headers.cookie;
		if (!cookieHeader) {
			return res.status(401).json({ message: "No cookies sent" });
		}

		const cookies = parse(cookieHeader);
		const token = cookies.token;

		if (!token) {
			return res.status(401).json({ message: "Token not found in cookies" });
		}

		try {
			const decoded = jwt.verify(token, JWT_SECRET);
			req.user = decoded; // Attach the decoded token to the request object
			next();
		} catch (error) {
			return res.status(400).json({ message: "Invalid token" });
		}
	},
};


are there any other files you would need to see to start troubleshooting, please let me know?
otherwise what is causing the error and where should we look to start solving it?