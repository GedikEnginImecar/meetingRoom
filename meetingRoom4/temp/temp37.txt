microEspModel.js:
module.exports = (sequelize, DataTypes) => {
	const MicroEsp = sequelize.define(`microEsp`, {
		microEspID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		microEspIP: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
		microEspLed: {
			type: DataTypes.BOOLEAN, // True = esp inside led bar, False = inside button box
			allowNull: false,
		},
		roomID: {
			type: DataTypes.INTEGER,
			allowNull: false,
			references: {
				model: "rooms",
				key: "roomID",
			},
		},
	});

	return MicroEsp;
};


roomModel.js:
module.exports = (sequelize, DataTypes) => {
	const Room = sequelize.define(`room`, {
		roomID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		roomName: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
		minPermission: {
			type: DataTypes.INTEGER,
			allowNull: false,
		},
		department: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
	});

	return Room;
};


meetingModel.js:
module.exports = (sequelize, DataTypes) => {
	const Meeting = sequelize.define(`meeting`, {
		meetingID: {
			type: DataTypes.INTEGER,
			primaryKey: true,
			autoIncrement: true,
		},
		meetingDate: {
			type: DataTypes.DATEONLY,
			allowNull: false,
		},
		meetingStart: {
			type: DataTypes.TIME,
			allowNull: false,
		},
		meetingEnd: {
			type: DataTypes.TIME,
			allowNull: false,
		},
		userID: {
			type: DataTypes.INTEGER,
			allowNull: false,
			references: {
				model: "users",
				key: "userID",
			},
		},
		roomID: {
			type: DataTypes.INTEGER,
			allowNull: false,
			references: {
				model: "rooms",
				key: "roomID",
			},
		},
	});
	return Meeting;
};


roomRouter.js:
// roomRouter.js

const express = require("express");
const router = express.Router();
const { roomController } = require("../controllers/roomController");
const { cookies } = require("../middlewares/auth/auth"); // Import the cookies object from auth.js
const { createRoomValidator } = require("../validators/roomValidator");

// Route for creating a room
router.post(
	"/create",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	createRoomValidator,
	roomController.createRoom
);

// Route to get all rooms
router.get("/rooms", cookies.verifyAndAttachUser, roomController.getAllRooms); // Using verifyAndAttachUser middleware from cookies object

// Route to get a room by ID
router.get(
	"/search/roomID/:roomID",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.getRoomByID
);

// Route to get a room by name
router.get(
	"/search/roomName/:roomName",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.getRoomByName
);

// Route to delete a room by ID
router.delete(
	"/delete/roomID/:roomID",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.deleteRoomByID
);

// Route to delete a room by name
router.delete(
	"/delete/roomName/:roomName",
	cookies.verifyAndAttachUser, // Using verifyAndAttachUser middleware from cookies object
	roomController.deleteRoomByName
);

module.exports = router;


meetingRouter.js:
// meetingRouter.js

const express = require("express");
const router = express.Router();
const { meetingController } = require("../controllers/meetingController");
const { cookies } = require("../middlewares/auth/auth"); // Import the cookies object from auth.js
const { createMeetingValidator } = require("../validators/meetingValidator");

// Route for creating a meeting
router.post(
	"/create",
	cookies.verifyAndAttachUser,
	createMeetingValidator,
	meetingController.createMeeting
);

// Route to get all meetings
router.get(
	"/meetings",
	cookies.verifyAndAttachUser,
	meetingController.getAllMeetings
);

// Route to get all meetings between two dates
router.get(
	"/search/between/:queryDateStart/:queryDateEnd/:roomID",
	cookies.verifyAndAttachUser,
	meetingController.getAllMeetingsBetween
);

// Route to get meetings by room ID
router.get(
	"/search/:roomID/:meetingDate",
	cookies.verifyAndAttachUser,
	meetingController.getMeetingsByRoomDate
);

// Route to delete a meeting by ID
router.delete(
	"/delete/meetingID/:meetingID",
	cookies.verifyAndAttachUser,
	meetingController.deleteMeetingByID
);

// Route to delete a meeting by info
router.delete(
	"/delete/byInfo/:roomID/:meetingDate/:meetingStart",
	cookies.verifyAndAttachUser,
	meetingController.deleteMeetingByInfo
);

module.exports = router;

// DELETE Meeting by ID Example Cycle:
// - Client sends a DELETE request to the server with the meeting ID included in the URL parameter.
// - Express routes the request to the appropriate route handler in meetingRouter.js.
// - The request passes through the auth, which verifies the access token stored in the client's cookies.
// - If the access token is valid, the middleware attaches the decoded user information to the request object.
// - The route handler executes the deleteMeetingByID controller function, which attempts to delete the meeting from the database.
// - The controller interacts with the database to perform the deletion operation.
// - Depending on the outcome, the server sends an appropriate HTTP response back to the client.
// - The client receives the response and updates its interface accordingly.


microEspRouter.js:
const express = require("express");
const router = express.Router();
const { microEspController } = require("../controllers/microEspController");

// Route for creating a MicroEsp
router.post("/add", microEspController.addMicroEsp);

// Route to get all MicroEsps
router.get("/microesp", microEspController.getAllMicroEsp);

// Route to get a MicroEsp by IP
router.get("/search/microEspIP/:microEspIP", microEspController.getMicroEspIP);

// Route to get a MicroEsp by ID
router.get("/search/microEspID/:microEspID", microEspController.getMicroEspID);

// Route to delete a MicroEsp by ID
router.delete("/delete/microEspID/:microEspID", microEspController.deleteMicroEspID);

// Route to delete a MicroEsp by IP and roomID
router.delete("/delete/microEspIPRoomID/:microEspIP/:roomID", microEspController.deleteMicroEspIPRoomID);

module.exports = router;


i have attatched relevant files to what we are working on currently inside ledController.js
to get ips and room data, you might need to use routers so i included them